import { defineComponent, toRef, createElementBlock, openBlock, Fragment, createBlock, createCommentVNode, renderSlot, normalizeProps, guardReactiveProps } from "vue";
import { _ as _sfc_main$1 } from "./BOrchestrator.vue_vue_type_script_setup_true_lang-Dz_rJ4Bq.mjs";
import { useProvideDefaults } from "./src/composables/useProvideDefaults/index.mjs";
import { useRegistry } from "./src/composables/useRegistry/index.mjs";
import { u as useOrchestratorRegistry } from "./orchestratorShared-BTzXOM4N.mjs";
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    inheritAttrs: false
  },
  __name: "BApp",
  props: {
    defaults: { default: void 0 },
    mergeDefaults: { type: [Boolean, Function], default: false },
    teleportTo: { default: void 0 },
    noOrchestrator: { type: Boolean, default: false },
    appendToast: { type: Boolean, default: false },
    rtl: { type: [Boolean, Object], default: false }
  },
  setup(__props) {
    const props = __props;
    useProvideDefaults(
      toRef(() => props.defaults),
      props.mergeDefaults
    );
    useRegistry(props.rtl);
    if (!props.noOrchestrator) {
      useOrchestratorRegistry();
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        !_ctx.noOrchestrator ? (openBlock(), createBlock(_sfc_main$1, {
          key: 0,
          "append-toast": _ctx.appendToast,
          "teleport-to": _ctx.teleportTo
        }, null, 8, ["append-toast", "teleport-to"])) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps(_ctx.$attrs)))
      ], 64);
    };
  }
});
export {
  _sfc_main as _
};
//# sourceMappingURL=BApp.vue_vue_type_script_setup_true_lang-Cln0-taF.mjs.map
