{"version":3,"file":"object-BvjuW1R8.js","sources":["../src/utils/object.ts"],"sourcesContent":["/**\n * Removes properties from an object, based on the values in an array, and returns the new object.\n * Equivalent to an object version of TS Omit<>\n */\nexport const omit = <\n  A extends Record<PropertyKey, unknown>,\n  const B extends ReadonlyArray<PropertyKey>,\n>(\n  objToPluck: Readonly<A>,\n  keysToPluck: Readonly<B> | readonly (keyof A)[]\n): Omit<A, B[number]> =>\n  Object.keys(objToPluck)\n    .filter((key) => !keysToPluck.map((el) => el.toString()).includes(key))\n    .reduce((result, key) => ({...result, [key]: objToPluck[key]}), {} as Omit<A, B[number]>)\n\n/**\n * Picks properties from an object, base on the values in an array, and returns the new object.\n * Equivalent to an object version of TS Pick<>\n */\nexport const pick = <\n  A extends Record<PropertyKey, unknown>,\n  const B extends ReadonlyArray<PropertyKey>,\n>(\n  objToPluck: Readonly<A>,\n  keysToPluck: Readonly<B> | readonly (keyof A)[]\n): Pick<A, B[number]> =>\n  [...keysToPluck].reduce(\n    (memo, prop) => {\n      memo[prop] = objToPluck[prop]\n      return memo\n    },\n    {} as Record<PropertyKey, unknown>\n  ) as Pick<A, B[number]>\n\n/**\n * Dynamically get a nested value from an array or\n * object with a string.\n *\n * @example get(person, 'friends[0].name')\n *\n * Thanks to\n * @link https://github.com/rayepps/radash/blob/master/src/object.ts#L214\n */\nexport const get = <TDefault = unknown>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any,\n  path: string,\n  defaultValue?: Readonly<TDefault>\n): TDefault => {\n  const segments = path.split(/[.[\\]]/g)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let current: any = value\n  for (const key of segments) {\n    if (current === null) return defaultValue as TDefault\n    if (current === undefined) return defaultValue as TDefault\n    if (key.trim() === '') continue\n    current = current[key]\n  }\n  if (current === undefined) return defaultValue as TDefault\n  return current\n}\n\n/**\n * Opposite of get, dynamically set a nested value into\n * an object using a key path. Does not modify the given\n * initial object.\n *\n * @example\n * set({}, 'name', 'ra') // => { name: 'ra' }\n * set({}, 'cards[0].value', 2) // => { cards: [{ value: 2 }] }\n *\n * Thanks to\n * @link https://github.com/rayepps/radash/blob/master/src/object.ts#L214\n */\nexport const set = <T extends object, K>(initial: T, path: string, value: K): T => {\n  const clone = <T>(obj: T): T => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const isPrimitive = (value: any): boolean =>\n      value === undefined ||\n      value === null ||\n      (typeof value !== 'object' && typeof value !== 'function')\n    // Primitive values do not need cloning.\n    if (isPrimitive(obj)) {\n      return obj\n    }\n\n    if (typeof obj === 'function') {\n      return obj.bind({})\n    }\n\n    const newObj = new ((obj as object).constructor as {new (): T})()\n\n    // Assign the props.\n    Object.getOwnPropertyNames(obj).forEach((prop) => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ;(newObj as any)[prop] = (obj as any)[prop]\n    })\n\n    return newObj\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const toInt = <T extends number | null = number>(value: any, defaultValue?: T): number | T => {\n    const def = defaultValue === undefined ? 0 : defaultValue\n    if (value === null || value === undefined) {\n      return def\n    }\n    const result = Number.parseInt(value)\n    return Number.isNaN(result) ? def : result\n  }\n\n  if (!initial) return {} as T\n  if (!path || value === undefined) return initial\n  const segments = path.split(/[.[\\]]/g).filter((x) => !!x.trim())\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const _set = (node: any) => {\n    if (segments.length > 1) {\n      const key = segments.shift() as string\n      const nextIsNum = toInt(segments[0], null) === null ? false : true\n      node[key] = node[key] === undefined ? (nextIsNum ? [] : {}) : node[key]\n      _set(node[key])\n    } else {\n      node[segments[0]] = value\n    }\n  }\n  const cloned = clone(initial)\n  _set(cloned)\n  return cloned\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const deepEqual = (a: any, b: any): boolean => {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== 'object' || a === null || typeof b !== 'object' || b === null) {\n    return false\n  }\n\n  const keysA = Object.keys(a),\n    keysB = Object.keys(b)\n\n  if (keysA.length !== keysB.length) {\n    return false\n  }\n\n  for (const key of keysA) {\n    if (!keysB.includes(key) || !deepEqual(a[key], b[key])) {\n      return false\n    }\n  }\n\n  return true\n}\n"],"names":["deepEqual","a","b","keysA","Object","keys","keysB","length","key","includes","value","path","defaultValue","segments","split","current","trim","objToPluck","keysToPluck","filter","map","el","toString","reduce","result","memo","prop","initial","x","_set","node","shift","nextIsNum","def","Number","parseInt","isNaN","toInt","cloned","obj","bind","newObj","constructor","getOwnPropertyNames","forEach","clone"],"mappings":"aAIO,MA+HMA,EAAY,CAACC,EAAQC,KAChC,GAAID,IAAMC,EACR,OAAO,EAGT,GAAiB,iBAAND,GAAwB,OAANA,GAA2B,iBAANC,GAAwB,OAANA,EAClE,OAAO,EAGT,MAAMC,EAAQC,OAAOC,KAAKJ,GACxBK,EAAQF,OAAOC,KAAKH,GAEtB,GAAIC,EAAMI,SAAWD,EAAMC,OACzB,OAAO,EAGT,IAAA,MAAWC,KAAOL,EAChB,IAAKG,EAAMG,SAASD,KAASR,EAAUC,EAAEO,GAAMN,EAAEM,IAC/C,OAAO,EAIX,OAAO,mCA9GU,CAEjBE,EACAC,EACAC,KAEA,MAAMC,EAAWF,EAAKG,MAAM,WAE5B,IAAIC,EAAeL,EACnB,IAAA,MAAWF,KAAOK,EAAU,CAC1B,GAAgB,OAAZE,EAAkB,OAAOH,EAC7B,QAAgB,IAAZG,EAAuB,OAAOH,EACf,KAAfJ,EAAIQ,SACRD,EAAUA,EAAQP,GACpB,CACA,YAAgB,IAAZO,EAA8BH,EAC3BG,gBAvDW,CAIlBE,EACAC,IAEAd,OAAOC,KAAKY,GACTE,OAAQX,IAASU,EAAYE,IAAKC,GAAOA,EAAGC,YAAYb,SAASD,IACjEe,OAAO,CAACC,EAAQhB,SAAagB,EAAQhB,CAACA,GAAMS,EAAWT,KAAQ,CAAA,gBAMhD,CAIlBS,EACAC,IAEA,IAAIA,GAAaK,OACf,CAACE,EAAMC,KACLD,EAAKC,GAAQT,EAAWS,GACjBD,GAET,CAAA,eA2Ce,CAAsBE,EAAYhB,EAAcD,KAqCjE,IAAKiB,EAAS,MAAO,CAAA,EACrB,IAAKhB,QAAkB,IAAVD,EAAqB,OAAOiB,EACzC,MAAMd,EAAWF,EAAKG,MAAM,WAAWK,OAAQS,KAAQA,EAAEZ,QAEnDa,EAAQC,IACZ,GAAIjB,EAASN,OAAS,EAAG,CACvB,MAAMC,EAAMK,EAASkB,QACfC,EAAyC,OAhBrC,EAAmCtB,EAAYE,KAC3D,MAAMqB,EAAuCrB,EAC7C,GAAIF,QACF,OAAOuB,EAET,MAAMT,EAASU,OAAOC,SAASzB,GAC/B,OAAOwB,OAAOE,MAAMZ,GAAUS,EAAMT,GAUhBa,CAAMxB,EAAS,GAAI,MACrCiB,EAAKtB,QAAqB,IAAdsB,EAAKtB,GAAsBwB,EAAY,GAAK,GAAMF,EAAKtB,GACnEqB,EAAKC,EAAKtB,GACZ,MACEsB,EAAKjB,EAAS,IAAMH,GAGlB4B,EAlDQ,CAAIC,IAOhB,GAJE7B,OADmBA,EAKL6B,IAFI,iBAAV7B,GAAuC,mBAAVA,EAGrC,OAAO6B,EANW,IAAC7B,EASrB,GAAmB,mBAAR6B,EACT,OAAOA,EAAIC,KAAK,IAGlB,MAAMC,EAAS,IAAMF,EAAeG,YAQpC,OALAtC,OAAOuC,oBAAoBJ,GAAKK,QAASlB,IAErCe,EAAef,GAASa,EAAYb,KAGjCe,GA2BMI,CAAMlB,GAErB,OADAE,EAAKS,GACEA"}