{"version":3,"file":"BFormSelect.vue_vue_type_script_setup_true_lang-BXcFPByu.js","sources":["../src/components/BFormSelect/BFormSelectOptionGroup.vue","../src/components/BFormSelect/BFormSelect.vue"],"sourcesContent":["<template>\n  <optgroup :label=\"props.label\">\n    <slot name=\"first\" />\n    <BFormSelectOption\n      v-for=\"(option, index) in normalizedOptions\"\n      :key=\"index\"\n      :disabled=\"option.disabled\"\n      :value=\"option.value\"\n      v-bind=\"$attrs\"\n    >\n      <slot name=\"option\" v-bind=\"option\">\n        {{ option.text }}\n      </slot>\n    </BFormSelectOption>\n    <slot />\n  </optgroup>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport BFormSelectOption from './BFormSelectOption.vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormSelectOptionGroupProps} from '../../types/ComponentProps'\nimport type {ComputedRef} from 'vue'\nimport {useFormSelect} from '../../composables/useFormSelect'\nimport type {SelectOption} from '../../types/SelectTypes'\nimport type {BFormSelectOptionGroupSlots} from '../../types'\n\nconst _props = withDefaults(defineProps<BFormSelectOptionGroupProps>(), {\n  disabledField: 'disabled',\n  label: undefined,\n  options: () => [],\n  textField: 'text',\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormSelectOptionGroup')\ndefineSlots<BFormSelectOptionGroupSlots<T>>()\n\n// The form select context is injected by BFormSelectOption components automatically\n// We don't need to handle the selected value here since each BFormSelectOption\n// will inject the context directly\n\nconst {normalizedOptions} = useFormSelect(() => props.options, props) as {\n  normalizedOptions: ComputedRef<SelectOption<T>[]>\n}\n</script>\n","<template>\n  <select\n    :id=\"computedId\"\n    ref=\"_input\"\n    v-model=\"localValue\"\n    :class=\"computedClasses\"\n    :name=\"props.name\"\n    :form=\"props.form || undefined\"\n    :multiple=\"props.multiple || undefined\"\n    :size=\"computedSelectSize\"\n    :disabled=\"props.disabled\"\n    :required=\"props.required || undefined\"\n    :aria-required=\"props.required || undefined\"\n    :aria-invalid=\"computedAriaInvalid\"\n  >\n    <slot name=\"first\" />\n    <template v-for=\"(option, index) in normalizedOptsWrapper\" :key=\"index\">\n      <BFormSelectOptionGroup\n        v-if=\"isComplex(option)\"\n        :label=\"option.label\"\n        :options=\"option.options\"\n        :value-field=\"props.valueField\"\n        :text-field=\"props.textField\"\n        :disabled-field=\"props.disabledField\"\n      />\n      <BFormSelectOption v-else :value=\"option.value\" :disabled=\"option.disabled\">\n        <slot name=\"option\" v-bind=\"option\">\n          {{ option.text }}\n        </slot>\n      </BFormSelectOption>\n    </template>\n    <slot />\n  </select>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport type {BFormSelectProps} from '../../types/ComponentProps'\nimport {computed, provide, readonly, useTemplateRef} from 'vue'\nimport BFormSelectOption from './BFormSelectOption.vue'\nimport BFormSelectOptionGroup from './BFormSelectOptionGroup.vue'\nimport {useAriaInvalid} from '../../composables/useAriaInvalid'\nimport {useFocus, useToNumber} from '@vueuse/core'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport {useStateClass} from '../../composables/useStateClass'\nimport {useFormSelect} from '../../composables/useFormSelect'\nimport type {ComplexSelectOptionRaw, SelectOption} from '../../types/SelectTypes'\nimport type {BFormSelectSlots} from '../../types'\nimport {formSelectKey} from '../../utils/keys'\n\nconst _props = withDefaults(defineProps<Omit<BFormSelectProps, 'modelValue'>>(), {\n  ariaInvalid: undefined,\n  autofocus: false,\n  disabled: false,\n  disabledField: 'disabled',\n  form: undefined,\n  id: undefined,\n  labelField: 'label',\n  multiple: false,\n  name: undefined,\n  options: () => [],\n  optionsField: 'options',\n  plain: false,\n  required: false,\n  selectSize: 0,\n  size: 'md',\n  state: null,\n  textField: 'text',\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormSelect')\ndefineSlots<BFormSelectSlots<T>>()\n\nconst modelValue = defineModel<T>({\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default: '' as any,\n})\n\nconst computedId = useId(() => props.id, 'input')\n\nconst selectSizeNumber = useToNumber(() => props.selectSize)\n\nconst stateClass = useStateClass(() => props.state)\n\nconst input = useTemplateRef('_input')\n\nconst {focused} = useFocus(input, {\n  initialValue: props.autofocus,\n})\n\nconst computedClasses = computed(() => [\n  stateClass.value,\n  {\n    'form-control': props.plain,\n    [`form-control-${props.size}`]: props.size !== 'md' && props.plain,\n    'form-select': !props.plain,\n    [`form-select-${props.size}`]: props.size !== 'md' && !props.plain,\n  },\n])\n\nconst computedSelectSize = computed(() =>\n  selectSizeNumber.value || props.plain ? selectSizeNumber.value : undefined\n)\n\nconst computedAriaInvalid = useAriaInvalid(\n  () => props.ariaInvalid,\n  () => props.state\n)\n\nconst {normalizedOptions, isComplex} = useFormSelect(() => props.options, props)\n\nconst normalizedOptsWrapper = computed(\n  () => normalizedOptions.value as readonly (ComplexSelectOptionRaw<T> | SelectOption<T>)[]\n)\n\nconst localValue = computed({\n  get: () => modelValue.value,\n  set: (newValue) => {\n    modelValue.value = newValue\n  },\n})\n\n// Provide the current model value for child components to inject\nprovide(formSelectKey, {\n  modelValue: readonly(localValue),\n})\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  element: input,\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n"],"names":["_props","__props","props","useDefaults","normalizedOptions","useFormSelect","options","_createElementBlock","label","_unref","_renderSlot","_ctx","$slots","_openBlock","_Fragment","_renderList","option","index","_createBlock","BFormSelectOption","_mergeProps","key","disabled","value","$attrs","ref_for","_createTextVNode","_toDisplayString","text","modelValue","_useModel","computedId","useId","id","selectSizeNumber","useToNumber","selectSize","stateClass","useStateClass","state","input","useTemplateRef","focused","useFocus","initialValue","autofocus","computedClasses","computed","plain","size","computedSelectSize","computedAriaInvalid","useAriaInvalid","ariaInvalid","isComplex","normalizedOptsWrapper","localValue","get","set","newValue","provide","formSelectKey","readonly","__expose","blur","element","focus","ref","$event","class","name","form","multiple","required","BFormSelectOptionGroup","valueField","textField","disabledField"],"mappings":"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"}