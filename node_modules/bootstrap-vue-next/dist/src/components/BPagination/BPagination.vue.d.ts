import { BvEvent } from '../../utils';
import { BPaginationProps } from '../../types/ComponentProps';
import { ClassValue } from '../../types/AnyValuedAttributes';
import { BPaginationSlots } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<{
    modelValue?: Exclude<BPaginationProps["modelValue"], undefined>;
} & Omit<BPaginationProps, "modelValue">, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (value: import('../../types/CommonTypes').Numberish) => any;
    "page-click": (event: BvEvent, pageNumber: number) => any;
}, string, import('vue').PublicProps, Readonly<{
    modelValue?: Exclude<BPaginationProps["modelValue"], undefined>;
} & Omit<BPaginationProps, "modelValue">> & Readonly<{
    "onUpdate:modelValue"?: ((value: import('../../types/CommonTypes').Numberish) => any) | undefined;
    "onPage-click"?: ((event: BvEvent, pageNumber: number) => any) | undefined;
}>, {
    disabled: boolean;
    size: import('../..').Size;
    ariaLabel: string;
    align: import('../..').AlignmentJustifyContent | "fill";
    ariaControls: string;
    limit: import('../../types/CommonTypes').Numberish;
    pills: boolean;
    ellipsisClass: ClassValue;
    ellipsisText: string;
    firstClass: ClassValue;
    firstNumber: boolean;
    firstText: string;
    noEllipsis: boolean;
    noGotoEndButtons: boolean;
    labelFirstPage: string;
    labelLastPage: string;
    labelNextPage: string;
    labelPage: string;
    labelPrevPage: string;
    lastClass: ClassValue;
    lastNumber: boolean;
    lastText: string;
    nextClass: ClassValue;
    nextText: string;
    pageClass: ClassValue;
    perPage: import('../../types/CommonTypes').Numberish;
    prevClass: ClassValue;
    prevText: string;
    totalRows: import('../../types/CommonTypes').Numberish;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _pageElements: HTMLLIElement[];
}, HTMLUListElement>, Readonly<BPaginationSlots> & BPaginationSlots>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
