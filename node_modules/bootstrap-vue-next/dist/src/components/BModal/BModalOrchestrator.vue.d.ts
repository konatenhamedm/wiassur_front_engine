declare const _default: import('vue').DefineComponent<import('../../types/CommonTypes').TeleporterProps, {
    show: (id?: import('../..').ControllerKey) => void;
    hide: (trigger?: string, id?: import('../..').ControllerKey) => void;
    hideAll: (trigger?: string) => void;
    get: (id: import('../..').ControllerKey) => {
        modal: import('../..').OrchestratorArrayValue;
        show(): void;
        hide(trigger?: string): void;
    } | {
        modal: import('vue').ComponentInternalInstance;
        show(): void;
        hide(trigger?: string): void;
    } | null;
    current: () => {
        show(): void;
        hide(trigger?: string): void;
        modal: import('vue').ComputedRef<import('vue').ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import('vue').ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import('vue').ComponentProvideOptions>, {}, {}, "", {}, any> | null | undefined>;
    } | null;
    create: (obj?: import('../..').OrchestratedModal, options?: import('../..').OrchestratorCreateOptions) => import('../..').PromiseWithComponent<typeof import('./BModal.vue').default, import('../..').ModalOrchestratorParam>;
    _isOrchestratorInstalled: import('vue').Ref<boolean, boolean>;
    store: import('vue').Ref<import('../..').OrchestratorArrayValue[], import('../..').OrchestratorArrayValue[]>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('../../types/CommonTypes').TeleporterProps> & Readonly<{}>, {
    teleportTo: string | import('vue').RendererElement | null;
    teleportDisabled: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export default _default;
