import { Boundary, RootBoundary } from '@floating-ui/vue';
import { BPopoverProps } from '../../types/ComponentProps';
import { BPopoverSlots } from '../../types/ComponentSlots';
type __VLS_Props = Omit<BPopoverProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BPopoverProps['modelValue'], undefined>;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<BPopoverSlots> & BPopoverSlots;
    refs: {
        _placeholder: HTMLSpanElement;
        _element: HTMLDivElement;
        _arrow: HTMLDivElement;
        _content: HTMLDivElement;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hide: (trigger?: string, noTriggerEmit?: boolean) => Promise<string>;
    show: (resolveOnHide?: boolean) => Promise<boolean | string>;
    toggle: (resolveOnHide?: boolean) => Promise<boolean | string>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    ok: (value: import('../..').BvTriggerableEvent) => any;
    blur: (value: import('../..').BvTriggerableEvent) => any;
    cancel: (value: import('../..').BvTriggerableEvent) => any;
    pointerleave: (value: import('../..').BvTriggerableEvent) => any;
    toggle: (value: import('../..').BvTriggerableEvent) => any;
    hidden: (value: import('../..').BvTriggerableEvent) => any;
    show: (value: import('../..').BvTriggerableEvent) => any;
    "show-prevented": (value: import('../..').BvTriggerableEvent) => any;
    hide: (value: import('../..').BvTriggerableEvent) => any;
    "hide-prevented": (value: import('../..').BvTriggerableEvent) => any;
    "toggle-prevented": (value: import('../..').BvTriggerableEvent) => any;
    shown: (value: import('../..').BvTriggerableEvent) => any;
    "update:modelValue": (value: boolean) => any;
    "click-outside": (value: import('../..').BvTriggerableEvent) => any;
    "close-on-hide": (value: import('../..').BvTriggerableEvent) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onOk?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onBlur?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onCancel?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onPointerleave?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    "onClick-outside"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onClose-on-hide"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
}>, {
    body: string;
    id: string;
    target: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
    unmountLazy: boolean;
    click: boolean;
    focus: boolean;
    title: string;
    show: boolean;
    initialAnimation: boolean;
    noFade: boolean;
    lazy: boolean;
    visible: boolean;
    bodyClass: import('../../types/AnyValuedAttributes').ClassValue;
    teleportTo: string | import('vue').RendererElement | null;
    tooltip: boolean;
    boundary: Boundary | RootBoundary;
    boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
    closeOnHide: boolean;
    hover: boolean;
    delay: number | Readonly<{
        show: number;
        hide: number;
    }>;
    floatingMiddleware: {
        name: string;
        options?: any;
        fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
    }[];
    hideMargin: number;
    inline: boolean;
    manual: boolean;
    noAutoClose: boolean;
    noFlip: boolean;
    noHide: boolean;
    noShift: boolean;
    noSize: boolean;
    noninteractive: boolean;
    offset: import('../../types/CommonTypes').Numberish | null;
    placement: import('../..').PopoverPlacement;
    realtime: boolean;
    reference: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
    strategy: import('../../../node_modules/@floating-ui/core').Strategy;
    titleClass: import('../../types/AnyValuedAttributes').ClassValue;
    teleportDisabled: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _placeholder: HTMLSpanElement;
    _element: HTMLDivElement;
    _arrow: HTMLDivElement;
    _content: HTMLDivElement;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
