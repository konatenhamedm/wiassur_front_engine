import { BAlertProps } from '../../types/ComponentProps';
type __VLS_Props = Omit<BAlertProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BAlertProps['modelValue'], undefined>;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<import('../..').BToastSlots> & import('../..').BToastSlots;
    refs: {
        _element: HTMLDivElement;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    show: (resolveOnHide?: boolean) => Promise<boolean | string>;
    hide: (trigger?: string, noTriggerEmit?: boolean) => Promise<string>;
    toggle: (resolveOnHide?: boolean) => Promise<boolean | string>;
    pause: () => void;
    restart: () => void;
    resume: () => void;
    stop: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    ok: (value: import('../..').BvTriggerableEvent) => any;
    cancel: (value: import('../..').BvTriggerableEvent) => any;
    close: (value: import('../..').BvTriggerableEvent) => any;
    toggle: (value: import('../..').BvTriggerableEvent) => any;
    hidden: (value: import('../..').BvTriggerableEvent) => any;
    show: (value: import('../..').BvTriggerableEvent) => any;
    "show-prevented": (value: import('../..').BvTriggerableEvent) => any;
    hide: (value: import('../..').BvTriggerableEvent) => any;
    "hide-prevented": (value: import('../..').BvTriggerableEvent) => any;
    "toggle-prevented": (value: import('../..').BvTriggerableEvent) => any;
    shown: (value: import('../..').BvTriggerableEvent) => any;
    "update:modelValue": (value: number | boolean) => any;
    "close-countdown": (value: number) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onOk?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onCancel?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onClose?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((value: number | boolean) => any) | undefined;
    "onClose-countdown"?: ((value: number) => any) | undefined;
}>, {
    disabled: boolean;
    to: import('vue-router').RouteLocationRaw;
    body: string;
    id: string;
    target: import('../..').LinkTarget;
    unmountLazy: boolean;
    title: string;
    replace: boolean;
    show: boolean;
    initialAnimation: boolean;
    noFade: boolean;
    lazy: boolean;
    transProps: Readonly<import('vue').TransitionProps>;
    visible: boolean;
    bodyClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerTag: string;
    href: string;
    routerComponentName: string;
    active: boolean;
    activeClass: string;
    exactActiveClass: string;
    rel: string;
    variant: import('../..').ColorVariant | null;
    opacity: import('../..').LinkOpacity;
    opacityHover: import('../..').LinkOpacity;
    underlineVariant: import('../..').ColorVariant | null;
    underlineOffset: import('../..').UnderlineOffset;
    underlineOffsetHover: import('../..').UnderlineOffset;
    underlineOpacity: import('../..').UnderlineOpacity;
    underlineOpacityHover: import('../..').UnderlineOpacity;
    icon: boolean;
    noRel: boolean;
    stretched: boolean;
    bgVariant: import('../../types/ColorTypes').BgColorVariant | null;
    textVariant: import('../..').TextColorVariant | null;
    interval: number | "requestAnimationFrame";
    noHoverPause: boolean;
    noResumeOnHoverLeave: boolean;
    alertClass: import('../../types/AnyValuedAttributes').ClassValue;
    closeClass: import('../../types/AnyValuedAttributes').ClassValue;
    closeContent: string;
    closeLabel: string;
    closeVariant: import('../..').ButtonVariant | null;
    dismissible: boolean;
    isStatus: boolean;
    progressProps: Omit<import('../..').BProgressBarProps, "label" | "max" | "value">;
    showOnPause: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _element: HTMLDivElement;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
