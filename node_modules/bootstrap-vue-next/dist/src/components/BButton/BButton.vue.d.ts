import { BButtonProps } from '../../types/ComponentProps';
import { ColorVariant } from '../../types/ColorTypes';
import { BButtonSlots } from '../../types';
type __VLS_Props = Omit<BButtonProps, 'pressed'>;
type __VLS_PublicProps = {
    'pressed'?: BButtonProps['pressed'];
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<BButtonSlots> & BButtonSlots;
    refs: {
        _element: unknown;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    click: (value: MouseEvent) => any;
    "update:pressed": (value: boolean | undefined) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onClick?: ((value: MouseEvent) => any) | undefined;
    "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
}>, {
    disabled: boolean;
    to: import('vue-router').RouteLocationRaw;
    pill: boolean;
    size: import('../..').Size;
    target: import('../..').LinkTarget;
    replace: boolean;
    tag: string;
    type: import('../..').ButtonType;
    href: string;
    routerComponentName: string;
    active: boolean;
    activeClass: string;
    exactActiveClass: string;
    rel: string;
    variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
    opacity: import('../..').LinkOpacity;
    opacityHover: import('../..').LinkOpacity;
    underlineVariant: ColorVariant | null;
    underlineOffset: import('../..').UnderlineOffset;
    underlineOffsetHover: import('../..').UnderlineOffset;
    underlineOpacity: import('../..').UnderlineOpacity;
    underlineOpacityHover: import('../..').UnderlineOpacity;
    icon: boolean;
    routerTag: string;
    stretched: boolean;
    loading: boolean;
    loadingFill: boolean;
    loadingText: string;
    squared: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _element: unknown;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
