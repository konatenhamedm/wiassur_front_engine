import { BDropdownProps } from '../../types/ComponentProps';
import { BNavItemDropdownSlots } from '../../types';
type __VLS_Props = Omit<BDropdownProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BDropdownProps['modelValue'], undefined>;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<BNavItemDropdownSlots> & BNavItemDropdownSlots;
    refs: {
        _dropdown: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly modelValue?: Exclude<BDropdownProps["modelValue"], undefined> | undefined;
                readonly disabled?: boolean | undefined;
                readonly id?: string | undefined;
                readonly size?: import('../..').Size | undefined;
                readonly text?: string | undefined;
                readonly unmountLazy?: boolean | undefined;
                readonly ariaLabel?: string | undefined;
                readonly role?: string | undefined;
                readonly split?: boolean | undefined;
                readonly show?: boolean | undefined;
                readonly isNav?: boolean | undefined;
                readonly initialAnimation?: boolean | undefined;
                readonly noAnimation?: boolean | undefined;
                readonly noFade?: boolean | undefined;
                readonly lazy?: boolean | undefined;
                readonly transProps?: Readonly<import('vue').TransitionProps> | undefined;
                readonly visible?: boolean | undefined;
                readonly variant?: (import('../..').ButtonVariant | null) | undefined;
                readonly icon?: boolean | undefined;
                readonly teleportTo?: string | import('vue').RendererElement | null | undefined;
                readonly boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
                readonly boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
                readonly floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
                readonly noFlip?: boolean | undefined;
                readonly noShift?: boolean | undefined;
                readonly noSize?: boolean | undefined;
                readonly offset?: (number | string | Readonly<{
                    mainAxis?: number;
                    crossAxis?: number;
                    alignmentAxis?: number | null;
                }>) | undefined;
                readonly placement?: import('../../../node_modules/@floating-ui/core').Placement | undefined;
                readonly strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
                readonly teleportDisabled?: boolean | undefined;
                readonly autoClose?: boolean | "inside" | "outside" | undefined;
                readonly menuClass?: import('../../types/AnyValuedAttributes').ClassValue;
                readonly noCaret?: boolean | undefined;
                readonly noWrapper?: boolean | undefined;
                readonly splitButtonType?: import('../..').ButtonType | undefined;
                readonly splitClass?: import('../../types/AnyValuedAttributes').ClassValue;
                readonly splitDisabled?: boolean | undefined;
                readonly splitHref?: string | undefined;
                readonly splitTo?: import('vue-router').RouteLocationRaw | undefined;
                readonly splitVariant?: (import('../..').ButtonVariant | null) | undefined;
                readonly toggleClass?: import('../../types/AnyValuedAttributes').ClassValue;
                readonly toggleText?: string | undefined;
                readonly wrapperClass?: import('../../types/AnyValuedAttributes').ClassValue;
                readonly onOk?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onCancel?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
                readonly "onSplit-click"?: ((value: MouseEvent) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            } & {
                _splitButton: ({
                    $: import('vue').ComponentInternalInstance;
                    $data: {};
                    $props: {
                        readonly pressed?: boolean | undefined;
                        readonly disabled?: boolean | undefined;
                        readonly to?: import('vue-router').RouteLocationRaw | undefined;
                        readonly pill?: boolean | undefined;
                        readonly size?: import('../..').Size | undefined;
                        readonly target?: import('../..').LinkTarget | undefined;
                        readonly replace?: boolean | undefined;
                        readonly tag?: string | undefined;
                        readonly type?: import('../..').ButtonType | undefined;
                        readonly href?: string | undefined;
                        readonly routerComponentName?: string | undefined;
                        readonly active?: boolean | undefined;
                        readonly activeClass?: string | undefined;
                        readonly exactActiveClass?: string | undefined;
                        readonly rel?: string | undefined;
                        readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                        readonly opacity?: import('../..').LinkOpacity | undefined;
                        readonly opacityHover?: import('../..').LinkOpacity | undefined;
                        readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                        readonly underlineOffset?: import('../..').UnderlineOffset | undefined;
                        readonly underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                        readonly underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                        readonly underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                        readonly icon?: boolean | undefined;
                        readonly noRel?: boolean | undefined;
                        readonly prefetch?: boolean | undefined;
                        readonly prefetchOn?: Partial<{
                            visibility: boolean;
                            interaction: boolean;
                        }> | undefined;
                        readonly noPrefetch?: boolean | undefined;
                        readonly prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                        readonly routerTag?: string | undefined;
                        readonly stretched?: boolean | undefined;
                        readonly loading?: boolean | undefined;
                        readonly loadingFill?: boolean | undefined;
                        readonly loadingText?: string | undefined;
                        readonly squared?: boolean | undefined;
                        readonly onClick?: ((value: MouseEvent) => any) | undefined;
                        readonly "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
                    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
                    $attrs: {
                        [x: string]: unknown;
                    };
                    $refs: {
                        [x: string]: unknown;
                    } & {
                        _element: unknown;
                    };
                    $slots: Readonly<{
                        [name: string]: import('vue').Slot<any> | undefined;
                    }>;
                    $root: import('vue').ComponentPublicInstance | null;
                    $parent: import('vue').ComponentPublicInstance | null;
                    $host: Element | null;
                    $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", value: boolean | undefined) => void);
                    $el: any;
                    $options: import('vue').ComponentOptionsBase<Readonly<{
                        pressed?: import('../..').BButtonProps["pressed"];
                    } & {
                        disabled?: boolean | undefined;
                        to?: import('vue-router').RouteLocationRaw | undefined;
                        pill?: boolean | undefined;
                        size?: import('../..').Size | undefined;
                        target?: import('../..').LinkTarget | undefined;
                        replace?: boolean | undefined;
                        tag?: string | undefined;
                        type?: import('../..').ButtonType | undefined;
                        href?: string | undefined;
                        routerComponentName?: string | undefined;
                        active?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        rel?: string | undefined;
                        variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                        opacity?: import('../..').LinkOpacity | undefined;
                        opacityHover?: import('../..').LinkOpacity | undefined;
                        underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                        underlineOffset?: import('../..').UnderlineOffset | undefined;
                        underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                        underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                        underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                        icon?: boolean | undefined;
                        noRel?: boolean | undefined;
                        prefetch?: boolean | undefined;
                        prefetchOn?: Partial<{
                            visibility: boolean;
                            interaction: boolean;
                        }> | undefined;
                        noPrefetch?: boolean | undefined;
                        prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                        routerTag?: string | undefined;
                        stretched?: boolean | undefined;
                        loading?: boolean | undefined;
                        loadingFill?: boolean | undefined;
                        loadingText?: string | undefined;
                        squared?: boolean | undefined;
                    }> & Readonly<{
                        onClick?: ((value: MouseEvent) => any) | undefined;
                        "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                        click: (value: MouseEvent) => any;
                        "update:pressed": (value: boolean | undefined) => any;
                    }, string, {
                        disabled: boolean;
                        to: import('vue-router').RouteLocationRaw;
                        pill: boolean;
                        size: import('../..').Size;
                        target: import('../..').LinkTarget;
                        replace: boolean;
                        tag: string;
                        type: import('../..').ButtonType;
                        href: string;
                        routerComponentName: string;
                        active: boolean;
                        activeClass: string;
                        exactActiveClass: string;
                        rel: string;
                        variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                        opacity: import('../..').LinkOpacity;
                        opacityHover: import('../..').LinkOpacity;
                        underlineVariant: import('../..').ColorVariant | null;
                        underlineOffset: import('../..').UnderlineOffset;
                        underlineOffsetHover: import('../..').UnderlineOffset;
                        underlineOpacity: import('../..').UnderlineOpacity;
                        underlineOpacityHover: import('../..').UnderlineOpacity;
                        icon: boolean;
                        routerTag: string;
                        stretched: boolean;
                        loading: boolean;
                        loadingFill: boolean;
                        loadingText: string;
                        squared: boolean;
                    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                        beforeCreate?: (() => void) | (() => void)[];
                        created?: (() => void) | (() => void)[];
                        beforeMount?: (() => void) | (() => void)[];
                        mounted?: (() => void) | (() => void)[];
                        beforeUpdate?: (() => void) | (() => void)[];
                        updated?: (() => void) | (() => void)[];
                        activated?: (() => void) | (() => void)[];
                        deactivated?: (() => void) | (() => void)[];
                        beforeDestroy?: (() => void) | (() => void)[];
                        beforeUnmount?: (() => void) | (() => void)[];
                        destroyed?: (() => void) | (() => void)[];
                        unmounted?: (() => void) | (() => void)[];
                        renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                        renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                        errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
                    };
                    $forceUpdate: () => void;
                    $nextTick: typeof import('vue').nextTick;
                    $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
                } & Readonly<{
                    disabled: boolean;
                    to: import('vue-router').RouteLocationRaw;
                    pill: boolean;
                    size: import('../..').Size;
                    target: import('../..').LinkTarget;
                    replace: boolean;
                    tag: string;
                    type: import('../..').ButtonType;
                    href: string;
                    routerComponentName: string;
                    active: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    rel: string;
                    variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                    opacity: import('../..').LinkOpacity;
                    opacityHover: import('../..').LinkOpacity;
                    underlineVariant: import('../..').ColorVariant | null;
                    underlineOffset: import('../..').UnderlineOffset;
                    underlineOffsetHover: import('../..').UnderlineOffset;
                    underlineOpacity: import('../..').UnderlineOpacity;
                    underlineOpacityHover: import('../..').UnderlineOpacity;
                    icon: boolean;
                    routerTag: string;
                    stretched: boolean;
                    loading: boolean;
                    loadingFill: boolean;
                    loadingText: string;
                    squared: boolean;
                }> & Omit<Readonly<{
                    pressed?: import('../..').BButtonProps["pressed"];
                } & {
                    disabled?: boolean | undefined;
                    to?: import('vue-router').RouteLocationRaw | undefined;
                    pill?: boolean | undefined;
                    size?: import('../..').Size | undefined;
                    target?: import('../..').LinkTarget | undefined;
                    replace?: boolean | undefined;
                    tag?: string | undefined;
                    type?: import('../..').ButtonType | undefined;
                    href?: string | undefined;
                    routerComponentName?: string | undefined;
                    active?: boolean | undefined;
                    activeClass?: string | undefined;
                    exactActiveClass?: string | undefined;
                    rel?: string | undefined;
                    variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                    opacity?: import('../..').LinkOpacity | undefined;
                    opacityHover?: import('../..').LinkOpacity | undefined;
                    underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                    underlineOffset?: import('../..').UnderlineOffset | undefined;
                    underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                    underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                    underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                    icon?: boolean | undefined;
                    noRel?: boolean | undefined;
                    prefetch?: boolean | undefined;
                    prefetchOn?: Partial<{
                        visibility: boolean;
                        interaction: boolean;
                    }> | undefined;
                    noPrefetch?: boolean | undefined;
                    prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                    routerTag?: string | undefined;
                    stretched?: boolean | undefined;
                    loading?: boolean | undefined;
                    loadingFill?: boolean | undefined;
                    loadingText?: string | undefined;
                    squared?: boolean | undefined;
                }> & Readonly<{
                    onClick?: ((value: MouseEvent) => any) | undefined;
                    "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
                }>, "disabled" | "to" | "pill" | "size" | "target" | "replace" | "tag" | "type" | "href" | "routerComponentName" | "active" | "activeClass" | "exactActiveClass" | "rel" | "variant" | "opacity" | "opacityHover" | "underlineVariant" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "icon" | "routerTag" | "stretched" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
                    $slots: Readonly<import('../..').BButtonSlots> & import('../..').BButtonSlots;
                }) | null;
                _button: ({
                    $: import('vue').ComponentInternalInstance;
                    $data: {};
                    $props: {
                        readonly pressed?: boolean | undefined;
                        readonly disabled?: boolean | undefined;
                        readonly to?: import('vue-router').RouteLocationRaw | undefined;
                        readonly pill?: boolean | undefined;
                        readonly size?: import('../..').Size | undefined;
                        readonly target?: import('../..').LinkTarget | undefined;
                        readonly replace?: boolean | undefined;
                        readonly tag?: string | undefined;
                        readonly type?: import('../..').ButtonType | undefined;
                        readonly href?: string | undefined;
                        readonly routerComponentName?: string | undefined;
                        readonly active?: boolean | undefined;
                        readonly activeClass?: string | undefined;
                        readonly exactActiveClass?: string | undefined;
                        readonly rel?: string | undefined;
                        readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                        readonly opacity?: import('../..').LinkOpacity | undefined;
                        readonly opacityHover?: import('../..').LinkOpacity | undefined;
                        readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                        readonly underlineOffset?: import('../..').UnderlineOffset | undefined;
                        readonly underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                        readonly underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                        readonly underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                        readonly icon?: boolean | undefined;
                        readonly noRel?: boolean | undefined;
                        readonly prefetch?: boolean | undefined;
                        readonly prefetchOn?: Partial<{
                            visibility: boolean;
                            interaction: boolean;
                        }> | undefined;
                        readonly noPrefetch?: boolean | undefined;
                        readonly prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                        readonly routerTag?: string | undefined;
                        readonly stretched?: boolean | undefined;
                        readonly loading?: boolean | undefined;
                        readonly loadingFill?: boolean | undefined;
                        readonly loadingText?: string | undefined;
                        readonly squared?: boolean | undefined;
                        readonly onClick?: ((value: MouseEvent) => any) | undefined;
                        readonly "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
                    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
                    $attrs: {
                        [x: string]: unknown;
                    };
                    $refs: {
                        [x: string]: unknown;
                    } & {
                        _element: unknown;
                    };
                    $slots: Readonly<{
                        [name: string]: import('vue').Slot<any> | undefined;
                    }>;
                    $root: import('vue').ComponentPublicInstance | null;
                    $parent: import('vue').ComponentPublicInstance | null;
                    $host: Element | null;
                    $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", value: boolean | undefined) => void);
                    $el: any;
                    $options: import('vue').ComponentOptionsBase<Readonly<{
                        pressed?: import('../..').BButtonProps["pressed"];
                    } & {
                        disabled?: boolean | undefined;
                        to?: import('vue-router').RouteLocationRaw | undefined;
                        pill?: boolean | undefined;
                        size?: import('../..').Size | undefined;
                        target?: import('../..').LinkTarget | undefined;
                        replace?: boolean | undefined;
                        tag?: string | undefined;
                        type?: import('../..').ButtonType | undefined;
                        href?: string | undefined;
                        routerComponentName?: string | undefined;
                        active?: boolean | undefined;
                        activeClass?: string | undefined;
                        exactActiveClass?: string | undefined;
                        rel?: string | undefined;
                        variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                        opacity?: import('../..').LinkOpacity | undefined;
                        opacityHover?: import('../..').LinkOpacity | undefined;
                        underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                        underlineOffset?: import('../..').UnderlineOffset | undefined;
                        underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                        underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                        underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                        icon?: boolean | undefined;
                        noRel?: boolean | undefined;
                        prefetch?: boolean | undefined;
                        prefetchOn?: Partial<{
                            visibility: boolean;
                            interaction: boolean;
                        }> | undefined;
                        noPrefetch?: boolean | undefined;
                        prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                        routerTag?: string | undefined;
                        stretched?: boolean | undefined;
                        loading?: boolean | undefined;
                        loadingFill?: boolean | undefined;
                        loadingText?: string | undefined;
                        squared?: boolean | undefined;
                    }> & Readonly<{
                        onClick?: ((value: MouseEvent) => any) | undefined;
                        "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
                    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                        click: (value: MouseEvent) => any;
                        "update:pressed": (value: boolean | undefined) => any;
                    }, string, {
                        disabled: boolean;
                        to: import('vue-router').RouteLocationRaw;
                        pill: boolean;
                        size: import('../..').Size;
                        target: import('../..').LinkTarget;
                        replace: boolean;
                        tag: string;
                        type: import('../..').ButtonType;
                        href: string;
                        routerComponentName: string;
                        active: boolean;
                        activeClass: string;
                        exactActiveClass: string;
                        rel: string;
                        variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                        opacity: import('../..').LinkOpacity;
                        opacityHover: import('../..').LinkOpacity;
                        underlineVariant: import('../..').ColorVariant | null;
                        underlineOffset: import('../..').UnderlineOffset;
                        underlineOffsetHover: import('../..').UnderlineOffset;
                        underlineOpacity: import('../..').UnderlineOpacity;
                        underlineOpacityHover: import('../..').UnderlineOpacity;
                        icon: boolean;
                        routerTag: string;
                        stretched: boolean;
                        loading: boolean;
                        loadingFill: boolean;
                        loadingText: string;
                        squared: boolean;
                    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                        beforeCreate?: (() => void) | (() => void)[];
                        created?: (() => void) | (() => void)[];
                        beforeMount?: (() => void) | (() => void)[];
                        mounted?: (() => void) | (() => void)[];
                        beforeUpdate?: (() => void) | (() => void)[];
                        updated?: (() => void) | (() => void)[];
                        activated?: (() => void) | (() => void)[];
                        deactivated?: (() => void) | (() => void)[];
                        beforeDestroy?: (() => void) | (() => void)[];
                        beforeUnmount?: (() => void) | (() => void)[];
                        destroyed?: (() => void) | (() => void)[];
                        unmounted?: (() => void) | (() => void)[];
                        renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                        renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                        errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
                    };
                    $forceUpdate: () => void;
                    $nextTick: typeof import('vue').nextTick;
                    $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
                } & Readonly<{
                    disabled: boolean;
                    to: import('vue-router').RouteLocationRaw;
                    pill: boolean;
                    size: import('../..').Size;
                    target: import('../..').LinkTarget;
                    replace: boolean;
                    tag: string;
                    type: import('../..').ButtonType;
                    href: string;
                    routerComponentName: string;
                    active: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    rel: string;
                    variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                    opacity: import('../..').LinkOpacity;
                    opacityHover: import('../..').LinkOpacity;
                    underlineVariant: import('../..').ColorVariant | null;
                    underlineOffset: import('../..').UnderlineOffset;
                    underlineOffsetHover: import('../..').UnderlineOffset;
                    underlineOpacity: import('../..').UnderlineOpacity;
                    underlineOpacityHover: import('../..').UnderlineOpacity;
                    icon: boolean;
                    routerTag: string;
                    stretched: boolean;
                    loading: boolean;
                    loadingFill: boolean;
                    loadingText: string;
                    squared: boolean;
                }> & Omit<Readonly<{
                    pressed?: import('../..').BButtonProps["pressed"];
                } & {
                    disabled?: boolean | undefined;
                    to?: import('vue-router').RouteLocationRaw | undefined;
                    pill?: boolean | undefined;
                    size?: import('../..').Size | undefined;
                    target?: import('../..').LinkTarget | undefined;
                    replace?: boolean | undefined;
                    tag?: string | undefined;
                    type?: import('../..').ButtonType | undefined;
                    href?: string | undefined;
                    routerComponentName?: string | undefined;
                    active?: boolean | undefined;
                    activeClass?: string | undefined;
                    exactActiveClass?: string | undefined;
                    rel?: string | undefined;
                    variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                    opacity?: import('../..').LinkOpacity | undefined;
                    opacityHover?: import('../..').LinkOpacity | undefined;
                    underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                    underlineOffset?: import('../..').UnderlineOffset | undefined;
                    underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                    underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                    underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                    icon?: boolean | undefined;
                    noRel?: boolean | undefined;
                    prefetch?: boolean | undefined;
                    prefetchOn?: Partial<{
                        visibility: boolean;
                        interaction: boolean;
                    }> | undefined;
                    noPrefetch?: boolean | undefined;
                    prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                    routerTag?: string | undefined;
                    stretched?: boolean | undefined;
                    loading?: boolean | undefined;
                    loadingFill?: boolean | undefined;
                    loadingText?: string | undefined;
                    squared?: boolean | undefined;
                }> & Readonly<{
                    onClick?: ((value: MouseEvent) => any) | undefined;
                    "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
                }>, "disabled" | "to" | "pill" | "size" | "target" | "replace" | "tag" | "type" | "href" | "routerComponentName" | "active" | "activeClass" | "exactActiveClass" | "rel" | "variant" | "opacity" | "opacityHover" | "underlineVariant" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "icon" | "routerTag" | "stretched" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
                    $slots: Readonly<import('../..').BButtonSlots> & import('../..').BButtonSlots;
                }) | null;
                _floating: HTMLUListElement;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "ok", value: import('../..').BvTriggerableEvent) => void) & ((event: "cancel", value: import('../..').BvTriggerableEvent) => void) & ((event: "toggle", value: import('../..').BvTriggerableEvent) => void) & ((event: "hidden", value: import('../..').BvTriggerableEvent) => void) & ((event: "show", value: import('../..').BvTriggerableEvent) => void) & ((event: "show-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "hide", value: import('../..').BvTriggerableEvent) => void) & ((event: "hide-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "toggle-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "shown", value: import('../..').BvTriggerableEvent) => void) & ((event: "update:modelValue", value: boolean) => void) & ((event: "split-click", value: MouseEvent) => void);
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                modelValue?: Exclude<BDropdownProps["modelValue"], undefined>;
            } & {
                disabled?: boolean | undefined;
                id?: string | undefined;
                size?: import('../..').Size | undefined;
                text?: string | undefined;
                unmountLazy?: boolean | undefined;
                ariaLabel?: string | undefined;
                role?: string | undefined;
                split?: boolean | undefined;
                show?: boolean | undefined;
                isNav?: boolean | undefined;
                initialAnimation?: boolean | undefined;
                noAnimation?: boolean | undefined;
                noFade?: boolean | undefined;
                lazy?: boolean | undefined;
                transProps?: Readonly<import('vue').TransitionProps> | undefined;
                visible?: boolean | undefined;
                variant?: (import('../..').ButtonVariant | null) | undefined;
                icon?: boolean | undefined;
                teleportTo?: string | import('vue').RendererElement | null | undefined;
                boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
                boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
                floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
                noFlip?: boolean | undefined;
                noShift?: boolean | undefined;
                noSize?: boolean | undefined;
                offset?: (number | string | Readonly<{
                    mainAxis?: number;
                    crossAxis?: number;
                    alignmentAxis?: number | null;
                }>) | undefined;
                placement?: import('../../../node_modules/@floating-ui/core').Placement | undefined;
                strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
                teleportDisabled?: boolean | undefined;
                autoClose?: boolean | "inside" | "outside" | undefined;
                menuClass?: import('../../types/AnyValuedAttributes').ClassValue;
                noCaret?: boolean | undefined;
                noWrapper?: boolean | undefined;
                splitButtonType?: import('../..').ButtonType | undefined;
                splitClass?: import('../../types/AnyValuedAttributes').ClassValue;
                splitDisabled?: boolean | undefined;
                splitHref?: string | undefined;
                splitTo?: import('vue-router').RouteLocationRaw | undefined;
                splitVariant?: (import('../..').ButtonVariant | null) | undefined;
                toggleClass?: import('../../types/AnyValuedAttributes').ClassValue;
                toggleText?: string | undefined;
                wrapperClass?: import('../../types/AnyValuedAttributes').ClassValue;
            }> & Readonly<{
                onOk?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onCancel?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
                "onSplit-click"?: ((value: MouseEvent) => any) | undefined;
            }>, {
                hide: (trigger?: string, noTriggerEmit?: boolean) => Promise<string>;
                show: (resolveOnHide?: boolean) => Promise<boolean | string>;
                toggle: (resolveOnHide?: boolean) => Promise<boolean | string>;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                ok: (value: import('../..').BvTriggerableEvent) => any;
                cancel: (value: import('../..').BvTriggerableEvent) => any;
                toggle: (value: import('../..').BvTriggerableEvent) => any;
                hidden: (value: import('../..').BvTriggerableEvent) => any;
                show: (value: import('../..').BvTriggerableEvent) => any;
                "show-prevented": (value: import('../..').BvTriggerableEvent) => any;
                hide: (value: import('../..').BvTriggerableEvent) => any;
                "hide-prevented": (value: import('../..').BvTriggerableEvent) => any;
                "toggle-prevented": (value: import('../..').BvTriggerableEvent) => any;
                shown: (value: import('../..').BvTriggerableEvent) => any;
                "update:modelValue": (value: boolean) => any;
                "split-click": (value: MouseEvent) => any;
            }, string, {
                disabled: boolean;
                id: string;
                size: import('../..').Size;
                text: string;
                unmountLazy: boolean;
                ariaLabel: string;
                role: string;
                split: boolean;
                show: boolean;
                isNav: boolean;
                initialAnimation: boolean;
                noFade: boolean;
                lazy: boolean;
                transProps: Readonly<import('vue').TransitionProps>;
                visible: boolean;
                variant: import('../..').ButtonVariant | null;
                icon: boolean;
                teleportTo: string | import('vue').RendererElement | null;
                boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
                boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
                floatingMiddleware: {
                    name: string;
                    options?: any;
                    fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
                }[];
                noFlip: boolean;
                noShift: boolean;
                noSize: boolean;
                offset: number | string | Readonly<{
                    mainAxis?: number;
                    crossAxis?: number;
                    alignmentAxis?: number | null;
                }>;
                placement: import('../../../node_modules/@floating-ui/core').Placement;
                strategy: import('../../../node_modules/@floating-ui/core').Strategy;
                teleportDisabled: boolean;
                autoClose: boolean | "inside" | "outside";
                menuClass: import('../../types/AnyValuedAttributes').ClassValue;
                noCaret: boolean;
                noWrapper: boolean;
                splitButtonType: import('../..').ButtonType;
                splitClass: import('../../types/AnyValuedAttributes').ClassValue;
                splitDisabled: boolean;
                splitHref: string;
                splitTo: import('vue-router').RouteLocationRaw;
                splitVariant: import('../..').ButtonVariant | null;
                toggleClass: import('../../types/AnyValuedAttributes').ClassValue;
                toggleText: string;
                wrapperClass: import('../../types/AnyValuedAttributes').ClassValue;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            disabled: boolean;
            id: string;
            size: import('../..').Size;
            text: string;
            unmountLazy: boolean;
            ariaLabel: string;
            role: string;
            split: boolean;
            show: boolean;
            isNav: boolean;
            initialAnimation: boolean;
            noFade: boolean;
            lazy: boolean;
            transProps: Readonly<import('vue').TransitionProps>;
            visible: boolean;
            variant: import('../..').ButtonVariant | null;
            icon: boolean;
            teleportTo: string | import('vue').RendererElement | null;
            boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
            boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
            floatingMiddleware: {
                name: string;
                options?: any;
                fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
            }[];
            noFlip: boolean;
            noShift: boolean;
            noSize: boolean;
            offset: number | string | Readonly<{
                mainAxis?: number;
                crossAxis?: number;
                alignmentAxis?: number | null;
            }>;
            placement: import('../../../node_modules/@floating-ui/core').Placement;
            strategy: import('../../../node_modules/@floating-ui/core').Strategy;
            teleportDisabled: boolean;
            autoClose: boolean | "inside" | "outside";
            menuClass: import('../../types/AnyValuedAttributes').ClassValue;
            noCaret: boolean;
            noWrapper: boolean;
            splitButtonType: import('../..').ButtonType;
            splitClass: import('../../types/AnyValuedAttributes').ClassValue;
            splitDisabled: boolean;
            splitHref: string;
            splitTo: import('vue-router').RouteLocationRaw;
            splitVariant: import('../..').ButtonVariant | null;
            toggleClass: import('../../types/AnyValuedAttributes').ClassValue;
            toggleText: string;
            wrapperClass: import('../../types/AnyValuedAttributes').ClassValue;
        }> & Omit<Readonly<{
            modelValue?: Exclude<BDropdownProps["modelValue"], undefined>;
        } & {
            disabled?: boolean | undefined;
            id?: string | undefined;
            size?: import('../..').Size | undefined;
            text?: string | undefined;
            unmountLazy?: boolean | undefined;
            ariaLabel?: string | undefined;
            role?: string | undefined;
            split?: boolean | undefined;
            show?: boolean | undefined;
            isNav?: boolean | undefined;
            initialAnimation?: boolean | undefined;
            noAnimation?: boolean | undefined;
            noFade?: boolean | undefined;
            lazy?: boolean | undefined;
            transProps?: Readonly<import('vue').TransitionProps> | undefined;
            visible?: boolean | undefined;
            variant?: (import('../..').ButtonVariant | null) | undefined;
            icon?: boolean | undefined;
            teleportTo?: string | import('vue').RendererElement | null | undefined;
            boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
            boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
            floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
            noFlip?: boolean | undefined;
            noShift?: boolean | undefined;
            noSize?: boolean | undefined;
            offset?: (number | string | Readonly<{
                mainAxis?: number;
                crossAxis?: number;
                alignmentAxis?: number | null;
            }>) | undefined;
            placement?: import('../../../node_modules/@floating-ui/core').Placement | undefined;
            strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
            teleportDisabled?: boolean | undefined;
            autoClose?: boolean | "inside" | "outside" | undefined;
            menuClass?: import('../../types/AnyValuedAttributes').ClassValue;
            noCaret?: boolean | undefined;
            noWrapper?: boolean | undefined;
            splitButtonType?: import('../..').ButtonType | undefined;
            splitClass?: import('../../types/AnyValuedAttributes').ClassValue;
            splitDisabled?: boolean | undefined;
            splitHref?: string | undefined;
            splitTo?: import('vue-router').RouteLocationRaw | undefined;
            splitVariant?: (import('../..').ButtonVariant | null) | undefined;
            toggleClass?: import('../../types/AnyValuedAttributes').ClassValue;
            toggleText?: string | undefined;
            wrapperClass?: import('../../types/AnyValuedAttributes').ClassValue;
        }> & Readonly<{
            onOk?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onCancel?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            "onSplit-click"?: ((value: MouseEvent) => any) | undefined;
        }>, "toggle" | "hide" | ("disabled" | "id" | "size" | "text" | "unmountLazy" | "ariaLabel" | "role" | "split" | "show" | "isNav" | "initialAnimation" | "noFade" | "lazy" | "transProps" | "visible" | "variant" | "icon" | "teleportTo" | "boundary" | "boundaryPadding" | "floatingMiddleware" | "noFlip" | "noShift" | "noSize" | "offset" | "placement" | "strategy" | "teleportDisabled" | "autoClose" | "menuClass" | "noCaret" | "noWrapper" | "splitButtonType" | "splitClass" | "splitDisabled" | "splitHref" | "splitTo" | "splitVariant" | "toggleClass" | "toggleText" | "wrapperClass")> & import('vue').ShallowUnwrapRef<{
            hide: (trigger?: string, noTriggerEmit?: boolean) => Promise<string>;
            show: (resolveOnHide?: boolean) => Promise<boolean | string>;
            toggle: (resolveOnHide?: boolean) => Promise<boolean | string>;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: Readonly<import('../..').BDropdownSlots> & import('../..').BDropdownSlots;
        }) | null;
    };
    rootEl: HTMLLIElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hide: () => void;
    show: () => void;
    toggle: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    ok: (value: import('../..').BvTriggerableEvent) => any;
    cancel: (value: import('../..').BvTriggerableEvent) => any;
    toggle: (value: import('../..').BvTriggerableEvent) => any;
    hidden: (value: import('../..').BvTriggerableEvent) => any;
    show: (value: import('../..').BvTriggerableEvent) => any;
    "show-prevented": (value: import('../..').BvTriggerableEvent) => any;
    hide: (value: import('../..').BvTriggerableEvent) => any;
    "hide-prevented": (value: import('../..').BvTriggerableEvent) => any;
    "toggle-prevented": (value: import('../..').BvTriggerableEvent) => any;
    shown: (value: import('../..').BvTriggerableEvent) => any;
    "update:modelValue": (value: boolean) => any;
    "split-click": (value: MouseEvent) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onOk?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onCancel?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    "onSplit-click"?: ((value: MouseEvent) => any) | undefined;
}>, {
    disabled: boolean;
    id: string;
    size: import('../..').Size;
    text: string;
    ariaLabel: string;
    role: string;
    split: boolean;
    isNav: boolean;
    initialAnimation: boolean;
    lazy: boolean;
    variant: import('../..').ButtonVariant | null;
    icon: boolean;
    teleportTo: string | import('vue').RendererElement | null;
    boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
    boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
    floatingMiddleware: {
        name: string;
        options?: any;
        fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
    }[];
    noFlip: boolean;
    noShift: boolean;
    noSize: boolean;
    offset: number | string | Readonly<{
        mainAxis?: number;
        crossAxis?: number;
        alignmentAxis?: number | null;
    }>;
    placement: import('../../../node_modules/@floating-ui/core').Placement;
    strategy: import('../../../node_modules/@floating-ui/core').Strategy;
    teleportDisabled: boolean;
    autoClose: boolean | "inside" | "outside";
    menuClass: import('../../types/AnyValuedAttributes').ClassValue;
    noCaret: boolean;
    noWrapper: boolean;
    splitButtonType: import('../..').ButtonType;
    splitClass: import('../../types/AnyValuedAttributes').ClassValue;
    splitDisabled: boolean;
    splitHref: string;
    splitTo: import('vue-router').RouteLocationRaw;
    splitVariant: import('../..').ButtonVariant | null;
    toggleClass: import('../../types/AnyValuedAttributes').ClassValue;
    toggleText: string;
    wrapperClass: import('../../types/AnyValuedAttributes').ClassValue;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _dropdown: ({
        $: import('vue').ComponentInternalInstance;
        $data: {};
        $props: {
            readonly modelValue?: Exclude<BDropdownProps["modelValue"], undefined> | undefined;
            readonly disabled?: boolean | undefined;
            readonly id?: string | undefined;
            readonly size?: import('../..').Size | undefined;
            readonly text?: string | undefined;
            readonly unmountLazy?: boolean | undefined;
            readonly ariaLabel?: string | undefined;
            readonly role?: string | undefined;
            readonly split?: boolean | undefined;
            readonly show?: boolean | undefined;
            readonly isNav?: boolean | undefined;
            readonly initialAnimation?: boolean | undefined;
            readonly noAnimation?: boolean | undefined;
            readonly noFade?: boolean | undefined;
            readonly lazy?: boolean | undefined;
            readonly transProps?: Readonly<import('vue').TransitionProps> | undefined;
            readonly visible?: boolean | undefined;
            readonly variant?: (import('../..').ButtonVariant | null) | undefined;
            readonly icon?: boolean | undefined;
            readonly teleportTo?: string | import('vue').RendererElement | null | undefined;
            readonly boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
            readonly boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
            readonly floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
            readonly noFlip?: boolean | undefined;
            readonly noShift?: boolean | undefined;
            readonly noSize?: boolean | undefined;
            readonly offset?: (number | string | Readonly<{
                mainAxis?: number;
                crossAxis?: number;
                alignmentAxis?: number | null;
            }>) | undefined;
            readonly placement?: import('../../../node_modules/@floating-ui/core').Placement | undefined;
            readonly strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
            readonly teleportDisabled?: boolean | undefined;
            readonly autoClose?: boolean | "inside" | "outside" | undefined;
            readonly menuClass?: import('../../types/AnyValuedAttributes').ClassValue;
            readonly noCaret?: boolean | undefined;
            readonly noWrapper?: boolean | undefined;
            readonly splitButtonType?: import('../..').ButtonType | undefined;
            readonly splitClass?: import('../../types/AnyValuedAttributes').ClassValue;
            readonly splitDisabled?: boolean | undefined;
            readonly splitHref?: string | undefined;
            readonly splitTo?: import('vue-router').RouteLocationRaw | undefined;
            readonly splitVariant?: (import('../..').ButtonVariant | null) | undefined;
            readonly toggleClass?: import('../../types/AnyValuedAttributes').ClassValue;
            readonly toggleText?: string | undefined;
            readonly wrapperClass?: import('../../types/AnyValuedAttributes').ClassValue;
            readonly onOk?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onCancel?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            readonly "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            readonly "onSplit-click"?: ((value: MouseEvent) => any) | undefined;
        } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        } & {
            _splitButton: ({
                $: import('vue').ComponentInternalInstance;
                $data: {};
                $props: {
                    readonly pressed?: boolean | undefined;
                    readonly disabled?: boolean | undefined;
                    readonly to?: import('vue-router').RouteLocationRaw | undefined;
                    readonly pill?: boolean | undefined;
                    readonly size?: import('../..').Size | undefined;
                    readonly target?: import('../..').LinkTarget | undefined;
                    readonly replace?: boolean | undefined;
                    readonly tag?: string | undefined;
                    readonly type?: import('../..').ButtonType | undefined;
                    readonly href?: string | undefined;
                    readonly routerComponentName?: string | undefined;
                    readonly active?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly rel?: string | undefined;
                    readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                    readonly opacity?: import('../..').LinkOpacity | undefined;
                    readonly opacityHover?: import('../..').LinkOpacity | undefined;
                    readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                    readonly underlineOffset?: import('../..').UnderlineOffset | undefined;
                    readonly underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                    readonly underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                    readonly underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                    readonly icon?: boolean | undefined;
                    readonly noRel?: boolean | undefined;
                    readonly prefetch?: boolean | undefined;
                    readonly prefetchOn?: Partial<{
                        visibility: boolean;
                        interaction: boolean;
                    }> | undefined;
                    readonly noPrefetch?: boolean | undefined;
                    readonly prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                    readonly routerTag?: string | undefined;
                    readonly stretched?: boolean | undefined;
                    readonly loading?: boolean | undefined;
                    readonly loadingFill?: boolean | undefined;
                    readonly loadingText?: string | undefined;
                    readonly squared?: boolean | undefined;
                    readonly onClick?: ((value: MouseEvent) => any) | undefined;
                    readonly "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
                } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                } & {
                    _element: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import('vue').Slot<any> | undefined;
                }>;
                $root: import('vue').ComponentPublicInstance | null;
                $parent: import('vue').ComponentPublicInstance | null;
                $host: Element | null;
                $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", value: boolean | undefined) => void);
                $el: any;
                $options: import('vue').ComponentOptionsBase<Readonly<{
                    pressed?: import('../..').BButtonProps["pressed"];
                } & {
                    disabled?: boolean | undefined;
                    to?: import('vue-router').RouteLocationRaw | undefined;
                    pill?: boolean | undefined;
                    size?: import('../..').Size | undefined;
                    target?: import('../..').LinkTarget | undefined;
                    replace?: boolean | undefined;
                    tag?: string | undefined;
                    type?: import('../..').ButtonType | undefined;
                    href?: string | undefined;
                    routerComponentName?: string | undefined;
                    active?: boolean | undefined;
                    activeClass?: string | undefined;
                    exactActiveClass?: string | undefined;
                    rel?: string | undefined;
                    variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                    opacity?: import('../..').LinkOpacity | undefined;
                    opacityHover?: import('../..').LinkOpacity | undefined;
                    underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                    underlineOffset?: import('../..').UnderlineOffset | undefined;
                    underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                    underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                    underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                    icon?: boolean | undefined;
                    noRel?: boolean | undefined;
                    prefetch?: boolean | undefined;
                    prefetchOn?: Partial<{
                        visibility: boolean;
                        interaction: boolean;
                    }> | undefined;
                    noPrefetch?: boolean | undefined;
                    prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                    routerTag?: string | undefined;
                    stretched?: boolean | undefined;
                    loading?: boolean | undefined;
                    loadingFill?: boolean | undefined;
                    loadingText?: string | undefined;
                    squared?: boolean | undefined;
                }> & Readonly<{
                    onClick?: ((value: MouseEvent) => any) | undefined;
                    "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                    click: (value: MouseEvent) => any;
                    "update:pressed": (value: boolean | undefined) => any;
                }, string, {
                    disabled: boolean;
                    to: import('vue-router').RouteLocationRaw;
                    pill: boolean;
                    size: import('../..').Size;
                    target: import('../..').LinkTarget;
                    replace: boolean;
                    tag: string;
                    type: import('../..').ButtonType;
                    href: string;
                    routerComponentName: string;
                    active: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    rel: string;
                    variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                    opacity: import('../..').LinkOpacity;
                    opacityHover: import('../..').LinkOpacity;
                    underlineVariant: import('../..').ColorVariant | null;
                    underlineOffset: import('../..').UnderlineOffset;
                    underlineOffsetHover: import('../..').UnderlineOffset;
                    underlineOpacity: import('../..').UnderlineOpacity;
                    underlineOpacityHover: import('../..').UnderlineOpacity;
                    icon: boolean;
                    routerTag: string;
                    stretched: boolean;
                    loading: boolean;
                    loadingFill: boolean;
                    loadingText: string;
                    squared: boolean;
                }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                    beforeCreate?: (() => void) | (() => void)[];
                    created?: (() => void) | (() => void)[];
                    beforeMount?: (() => void) | (() => void)[];
                    mounted?: (() => void) | (() => void)[];
                    beforeUpdate?: (() => void) | (() => void)[];
                    updated?: (() => void) | (() => void)[];
                    activated?: (() => void) | (() => void)[];
                    deactivated?: (() => void) | (() => void)[];
                    beforeDestroy?: (() => void) | (() => void)[];
                    beforeUnmount?: (() => void) | (() => void)[];
                    destroyed?: (() => void) | (() => void)[];
                    unmounted?: (() => void) | (() => void)[];
                    renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                    renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                    errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
                };
                $forceUpdate: () => void;
                $nextTick: typeof import('vue').nextTick;
                $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
            } & Readonly<{
                disabled: boolean;
                to: import('vue-router').RouteLocationRaw;
                pill: boolean;
                size: import('../..').Size;
                target: import('../..').LinkTarget;
                replace: boolean;
                tag: string;
                type: import('../..').ButtonType;
                href: string;
                routerComponentName: string;
                active: boolean;
                activeClass: string;
                exactActiveClass: string;
                rel: string;
                variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                opacity: import('../..').LinkOpacity;
                opacityHover: import('../..').LinkOpacity;
                underlineVariant: import('../..').ColorVariant | null;
                underlineOffset: import('../..').UnderlineOffset;
                underlineOffsetHover: import('../..').UnderlineOffset;
                underlineOpacity: import('../..').UnderlineOpacity;
                underlineOpacityHover: import('../..').UnderlineOpacity;
                icon: boolean;
                routerTag: string;
                stretched: boolean;
                loading: boolean;
                loadingFill: boolean;
                loadingText: string;
                squared: boolean;
            }> & Omit<Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & {
                disabled?: boolean | undefined;
                to?: import('vue-router').RouteLocationRaw | undefined;
                pill?: boolean | undefined;
                size?: import('../..').Size | undefined;
                target?: import('../..').LinkTarget | undefined;
                replace?: boolean | undefined;
                tag?: string | undefined;
                type?: import('../..').ButtonType | undefined;
                href?: string | undefined;
                routerComponentName?: string | undefined;
                active?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                rel?: string | undefined;
                variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                opacity?: import('../..').LinkOpacity | undefined;
                opacityHover?: import('../..').LinkOpacity | undefined;
                underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                underlineOffset?: import('../..').UnderlineOffset | undefined;
                underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                icon?: boolean | undefined;
                noRel?: boolean | undefined;
                prefetch?: boolean | undefined;
                prefetchOn?: Partial<{
                    visibility: boolean;
                    interaction: boolean;
                }> | undefined;
                noPrefetch?: boolean | undefined;
                prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                routerTag?: string | undefined;
                stretched?: boolean | undefined;
                loading?: boolean | undefined;
                loadingFill?: boolean | undefined;
                loadingText?: string | undefined;
                squared?: boolean | undefined;
            }> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
            }>, "disabled" | "to" | "pill" | "size" | "target" | "replace" | "tag" | "type" | "href" | "routerComponentName" | "active" | "activeClass" | "exactActiveClass" | "rel" | "variant" | "opacity" | "opacityHover" | "underlineVariant" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "icon" | "routerTag" | "stretched" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
                $slots: Readonly<import('../..').BButtonSlots> & import('../..').BButtonSlots;
            }) | null;
            _button: ({
                $: import('vue').ComponentInternalInstance;
                $data: {};
                $props: {
                    readonly pressed?: boolean | undefined;
                    readonly disabled?: boolean | undefined;
                    readonly to?: import('vue-router').RouteLocationRaw | undefined;
                    readonly pill?: boolean | undefined;
                    readonly size?: import('../..').Size | undefined;
                    readonly target?: import('../..').LinkTarget | undefined;
                    readonly replace?: boolean | undefined;
                    readonly tag?: string | undefined;
                    readonly type?: import('../..').ButtonType | undefined;
                    readonly href?: string | undefined;
                    readonly routerComponentName?: string | undefined;
                    readonly active?: boolean | undefined;
                    readonly activeClass?: string | undefined;
                    readonly exactActiveClass?: string | undefined;
                    readonly rel?: string | undefined;
                    readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                    readonly opacity?: import('../..').LinkOpacity | undefined;
                    readonly opacityHover?: import('../..').LinkOpacity | undefined;
                    readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                    readonly underlineOffset?: import('../..').UnderlineOffset | undefined;
                    readonly underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                    readonly underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                    readonly underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                    readonly icon?: boolean | undefined;
                    readonly noRel?: boolean | undefined;
                    readonly prefetch?: boolean | undefined;
                    readonly prefetchOn?: Partial<{
                        visibility: boolean;
                        interaction: boolean;
                    }> | undefined;
                    readonly noPrefetch?: boolean | undefined;
                    readonly prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                    readonly routerTag?: string | undefined;
                    readonly stretched?: boolean | undefined;
                    readonly loading?: boolean | undefined;
                    readonly loadingFill?: boolean | undefined;
                    readonly loadingText?: string | undefined;
                    readonly squared?: boolean | undefined;
                    readonly onClick?: ((value: MouseEvent) => any) | undefined;
                    readonly "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
                } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                } & {
                    _element: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import('vue').Slot<any> | undefined;
                }>;
                $root: import('vue').ComponentPublicInstance | null;
                $parent: import('vue').ComponentPublicInstance | null;
                $host: Element | null;
                $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", value: boolean | undefined) => void);
                $el: any;
                $options: import('vue').ComponentOptionsBase<Readonly<{
                    pressed?: import('../..').BButtonProps["pressed"];
                } & {
                    disabled?: boolean | undefined;
                    to?: import('vue-router').RouteLocationRaw | undefined;
                    pill?: boolean | undefined;
                    size?: import('../..').Size | undefined;
                    target?: import('../..').LinkTarget | undefined;
                    replace?: boolean | undefined;
                    tag?: string | undefined;
                    type?: import('../..').ButtonType | undefined;
                    href?: string | undefined;
                    routerComponentName?: string | undefined;
                    active?: boolean | undefined;
                    activeClass?: string | undefined;
                    exactActiveClass?: string | undefined;
                    rel?: string | undefined;
                    variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                    opacity?: import('../..').LinkOpacity | undefined;
                    opacityHover?: import('../..').LinkOpacity | undefined;
                    underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                    underlineOffset?: import('../..').UnderlineOffset | undefined;
                    underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                    underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                    underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                    icon?: boolean | undefined;
                    noRel?: boolean | undefined;
                    prefetch?: boolean | undefined;
                    prefetchOn?: Partial<{
                        visibility: boolean;
                        interaction: boolean;
                    }> | undefined;
                    noPrefetch?: boolean | undefined;
                    prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                    routerTag?: string | undefined;
                    stretched?: boolean | undefined;
                    loading?: boolean | undefined;
                    loadingFill?: boolean | undefined;
                    loadingText?: string | undefined;
                    squared?: boolean | undefined;
                }> & Readonly<{
                    onClick?: ((value: MouseEvent) => any) | undefined;
                    "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
                }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                    click: (value: MouseEvent) => any;
                    "update:pressed": (value: boolean | undefined) => any;
                }, string, {
                    disabled: boolean;
                    to: import('vue-router').RouteLocationRaw;
                    pill: boolean;
                    size: import('../..').Size;
                    target: import('../..').LinkTarget;
                    replace: boolean;
                    tag: string;
                    type: import('../..').ButtonType;
                    href: string;
                    routerComponentName: string;
                    active: boolean;
                    activeClass: string;
                    exactActiveClass: string;
                    rel: string;
                    variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                    opacity: import('../..').LinkOpacity;
                    opacityHover: import('../..').LinkOpacity;
                    underlineVariant: import('../..').ColorVariant | null;
                    underlineOffset: import('../..').UnderlineOffset;
                    underlineOffsetHover: import('../..').UnderlineOffset;
                    underlineOpacity: import('../..').UnderlineOpacity;
                    underlineOpacityHover: import('../..').UnderlineOpacity;
                    icon: boolean;
                    routerTag: string;
                    stretched: boolean;
                    loading: boolean;
                    loadingFill: boolean;
                    loadingText: string;
                    squared: boolean;
                }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                    beforeCreate?: (() => void) | (() => void)[];
                    created?: (() => void) | (() => void)[];
                    beforeMount?: (() => void) | (() => void)[];
                    mounted?: (() => void) | (() => void)[];
                    beforeUpdate?: (() => void) | (() => void)[];
                    updated?: (() => void) | (() => void)[];
                    activated?: (() => void) | (() => void)[];
                    deactivated?: (() => void) | (() => void)[];
                    beforeDestroy?: (() => void) | (() => void)[];
                    beforeUnmount?: (() => void) | (() => void)[];
                    destroyed?: (() => void) | (() => void)[];
                    unmounted?: (() => void) | (() => void)[];
                    renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                    renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                    errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
                };
                $forceUpdate: () => void;
                $nextTick: typeof import('vue').nextTick;
                $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
            } & Readonly<{
                disabled: boolean;
                to: import('vue-router').RouteLocationRaw;
                pill: boolean;
                size: import('../..').Size;
                target: import('../..').LinkTarget;
                replace: boolean;
                tag: string;
                type: import('../..').ButtonType;
                href: string;
                routerComponentName: string;
                active: boolean;
                activeClass: string;
                exactActiveClass: string;
                rel: string;
                variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                opacity: import('../..').LinkOpacity;
                opacityHover: import('../..').LinkOpacity;
                underlineVariant: import('../..').ColorVariant | null;
                underlineOffset: import('../..').UnderlineOffset;
                underlineOffsetHover: import('../..').UnderlineOffset;
                underlineOpacity: import('../..').UnderlineOpacity;
                underlineOpacityHover: import('../..').UnderlineOpacity;
                icon: boolean;
                routerTag: string;
                stretched: boolean;
                loading: boolean;
                loadingFill: boolean;
                loadingText: string;
                squared: boolean;
            }> & Omit<Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & {
                disabled?: boolean | undefined;
                to?: import('vue-router').RouteLocationRaw | undefined;
                pill?: boolean | undefined;
                size?: import('../..').Size | undefined;
                target?: import('../..').LinkTarget | undefined;
                replace?: boolean | undefined;
                tag?: string | undefined;
                type?: import('../..').ButtonType | undefined;
                href?: string | undefined;
                routerComponentName?: string | undefined;
                active?: boolean | undefined;
                activeClass?: string | undefined;
                exactActiveClass?: string | undefined;
                rel?: string | undefined;
                variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                opacity?: import('../..').LinkOpacity | undefined;
                opacityHover?: import('../..').LinkOpacity | undefined;
                underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                underlineOffset?: import('../..').UnderlineOffset | undefined;
                underlineOffsetHover?: import('../..').UnderlineOffset | undefined;
                underlineOpacity?: import('../..').UnderlineOpacity | undefined;
                underlineOpacityHover?: import('../..').UnderlineOpacity | undefined;
                icon?: boolean | undefined;
                noRel?: boolean | undefined;
                prefetch?: boolean | undefined;
                prefetchOn?: Partial<{
                    visibility: boolean;
                    interaction: boolean;
                }> | undefined;
                noPrefetch?: boolean | undefined;
                prefetchedClass?: import('../../types/AnyValuedAttributes').ClassValue;
                routerTag?: string | undefined;
                stretched?: boolean | undefined;
                loading?: boolean | undefined;
                loadingFill?: boolean | undefined;
                loadingText?: string | undefined;
                squared?: boolean | undefined;
            }> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((value: boolean | undefined) => any) | undefined;
            }>, "disabled" | "to" | "pill" | "size" | "target" | "replace" | "tag" | "type" | "href" | "routerComponentName" | "active" | "activeClass" | "exactActiveClass" | "rel" | "variant" | "opacity" | "opacityHover" | "underlineVariant" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "icon" | "routerTag" | "stretched" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
                $slots: Readonly<import('../..').BButtonSlots> & import('../..').BButtonSlots;
            }) | null;
            _floating: HTMLUListElement;
        };
        $slots: Readonly<{
            [name: string]: import('vue').Slot<any> | undefined;
        }>;
        $root: import('vue').ComponentPublicInstance | null;
        $parent: import('vue').ComponentPublicInstance | null;
        $host: Element | null;
        $emit: ((event: "ok", value: import('../..').BvTriggerableEvent) => void) & ((event: "cancel", value: import('../..').BvTriggerableEvent) => void) & ((event: "toggle", value: import('../..').BvTriggerableEvent) => void) & ((event: "hidden", value: import('../..').BvTriggerableEvent) => void) & ((event: "show", value: import('../..').BvTriggerableEvent) => void) & ((event: "show-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "hide", value: import('../..').BvTriggerableEvent) => void) & ((event: "hide-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "toggle-prevented", value: import('../..').BvTriggerableEvent) => void) & ((event: "shown", value: import('../..').BvTriggerableEvent) => void) & ((event: "update:modelValue", value: boolean) => void) & ((event: "split-click", value: MouseEvent) => void);
        $el: any;
        $options: import('vue').ComponentOptionsBase<Readonly<{
            modelValue?: Exclude<BDropdownProps["modelValue"], undefined>;
        } & {
            disabled?: boolean | undefined;
            id?: string | undefined;
            size?: import('../..').Size | undefined;
            text?: string | undefined;
            unmountLazy?: boolean | undefined;
            ariaLabel?: string | undefined;
            role?: string | undefined;
            split?: boolean | undefined;
            show?: boolean | undefined;
            isNav?: boolean | undefined;
            initialAnimation?: boolean | undefined;
            noAnimation?: boolean | undefined;
            noFade?: boolean | undefined;
            lazy?: boolean | undefined;
            transProps?: Readonly<import('vue').TransitionProps> | undefined;
            visible?: boolean | undefined;
            variant?: (import('../..').ButtonVariant | null) | undefined;
            icon?: boolean | undefined;
            teleportTo?: string | import('vue').RendererElement | null | undefined;
            boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
            boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
            floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
            noFlip?: boolean | undefined;
            noShift?: boolean | undefined;
            noSize?: boolean | undefined;
            offset?: (number | string | Readonly<{
                mainAxis?: number;
                crossAxis?: number;
                alignmentAxis?: number | null;
            }>) | undefined;
            placement?: import('../../../node_modules/@floating-ui/core').Placement | undefined;
            strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
            teleportDisabled?: boolean | undefined;
            autoClose?: boolean | "inside" | "outside" | undefined;
            menuClass?: import('../../types/AnyValuedAttributes').ClassValue;
            noCaret?: boolean | undefined;
            noWrapper?: boolean | undefined;
            splitButtonType?: import('../..').ButtonType | undefined;
            splitClass?: import('../../types/AnyValuedAttributes').ClassValue;
            splitDisabled?: boolean | undefined;
            splitHref?: string | undefined;
            splitTo?: import('vue-router').RouteLocationRaw | undefined;
            splitVariant?: (import('../..').ButtonVariant | null) | undefined;
            toggleClass?: import('../../types/AnyValuedAttributes').ClassValue;
            toggleText?: string | undefined;
            wrapperClass?: import('../../types/AnyValuedAttributes').ClassValue;
        }> & Readonly<{
            onOk?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onCancel?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            "onSplit-click"?: ((value: MouseEvent) => any) | undefined;
        }>, {
            hide: (trigger?: string, noTriggerEmit?: boolean) => Promise<string>;
            show: (resolveOnHide?: boolean) => Promise<boolean | string>;
            toggle: (resolveOnHide?: boolean) => Promise<boolean | string>;
        }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
            ok: (value: import('../..').BvTriggerableEvent) => any;
            cancel: (value: import('../..').BvTriggerableEvent) => any;
            toggle: (value: import('../..').BvTriggerableEvent) => any;
            hidden: (value: import('../..').BvTriggerableEvent) => any;
            show: (value: import('../..').BvTriggerableEvent) => any;
            "show-prevented": (value: import('../..').BvTriggerableEvent) => any;
            hide: (value: import('../..').BvTriggerableEvent) => any;
            "hide-prevented": (value: import('../..').BvTriggerableEvent) => any;
            "toggle-prevented": (value: import('../..').BvTriggerableEvent) => any;
            shown: (value: import('../..').BvTriggerableEvent) => any;
            "update:modelValue": (value: boolean) => any;
            "split-click": (value: MouseEvent) => any;
        }, string, {
            disabled: boolean;
            id: string;
            size: import('../..').Size;
            text: string;
            unmountLazy: boolean;
            ariaLabel: string;
            role: string;
            split: boolean;
            show: boolean;
            isNav: boolean;
            initialAnimation: boolean;
            noFade: boolean;
            lazy: boolean;
            transProps: Readonly<import('vue').TransitionProps>;
            visible: boolean;
            variant: import('../..').ButtonVariant | null;
            icon: boolean;
            teleportTo: string | import('vue').RendererElement | null;
            boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
            boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
            floatingMiddleware: {
                name: string;
                options?: any;
                fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
            }[];
            noFlip: boolean;
            noShift: boolean;
            noSize: boolean;
            offset: number | string | Readonly<{
                mainAxis?: number;
                crossAxis?: number;
                alignmentAxis?: number | null;
            }>;
            placement: import('../../../node_modules/@floating-ui/core').Placement;
            strategy: import('../../../node_modules/@floating-ui/core').Strategy;
            teleportDisabled: boolean;
            autoClose: boolean | "inside" | "outside";
            menuClass: import('../../types/AnyValuedAttributes').ClassValue;
            noCaret: boolean;
            noWrapper: boolean;
            splitButtonType: import('../..').ButtonType;
            splitClass: import('../../types/AnyValuedAttributes').ClassValue;
            splitDisabled: boolean;
            splitHref: string;
            splitTo: import('vue-router').RouteLocationRaw;
            splitVariant: import('../..').ButtonVariant | null;
            toggleClass: import('../../types/AnyValuedAttributes').ClassValue;
            toggleText: string;
            wrapperClass: import('../../types/AnyValuedAttributes').ClassValue;
        }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import('vue').nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
    } & Readonly<{
        disabled: boolean;
        id: string;
        size: import('../..').Size;
        text: string;
        unmountLazy: boolean;
        ariaLabel: string;
        role: string;
        split: boolean;
        show: boolean;
        isNav: boolean;
        initialAnimation: boolean;
        noFade: boolean;
        lazy: boolean;
        transProps: Readonly<import('vue').TransitionProps>;
        visible: boolean;
        variant: import('../..').ButtonVariant | null;
        icon: boolean;
        teleportTo: string | import('vue').RendererElement | null;
        boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
        boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
        floatingMiddleware: {
            name: string;
            options?: any;
            fn: (state: import('@floating-ui/vue').MiddlewareState) => import('../../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../../node_modules/@floating-ui/core').MiddlewareReturn>;
        }[];
        noFlip: boolean;
        noShift: boolean;
        noSize: boolean;
        offset: number | string | Readonly<{
            mainAxis?: number;
            crossAxis?: number;
            alignmentAxis?: number | null;
        }>;
        placement: import('../../../node_modules/@floating-ui/core').Placement;
        strategy: import('../../../node_modules/@floating-ui/core').Strategy;
        teleportDisabled: boolean;
        autoClose: boolean | "inside" | "outside";
        menuClass: import('../../types/AnyValuedAttributes').ClassValue;
        noCaret: boolean;
        noWrapper: boolean;
        splitButtonType: import('../..').ButtonType;
        splitClass: import('../../types/AnyValuedAttributes').ClassValue;
        splitDisabled: boolean;
        splitHref: string;
        splitTo: import('vue-router').RouteLocationRaw;
        splitVariant: import('../..').ButtonVariant | null;
        toggleClass: import('../../types/AnyValuedAttributes').ClassValue;
        toggleText: string;
        wrapperClass: import('../../types/AnyValuedAttributes').ClassValue;
    }> & Omit<Readonly<{
        modelValue?: Exclude<BDropdownProps["modelValue"], undefined>;
    } & {
        disabled?: boolean | undefined;
        id?: string | undefined;
        size?: import('../..').Size | undefined;
        text?: string | undefined;
        unmountLazy?: boolean | undefined;
        ariaLabel?: string | undefined;
        role?: string | undefined;
        split?: boolean | undefined;
        show?: boolean | undefined;
        isNav?: boolean | undefined;
        initialAnimation?: boolean | undefined;
        noAnimation?: boolean | undefined;
        noFade?: boolean | undefined;
        lazy?: boolean | undefined;
        transProps?: Readonly<import('vue').TransitionProps> | undefined;
        visible?: boolean | undefined;
        variant?: (import('../..').ButtonVariant | null) | undefined;
        icon?: boolean | undefined;
        teleportTo?: string | import('vue').RendererElement | null | undefined;
        boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
        boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
        floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
        noFlip?: boolean | undefined;
        noShift?: boolean | undefined;
        noSize?: boolean | undefined;
        offset?: (number | string | Readonly<{
            mainAxis?: number;
            crossAxis?: number;
            alignmentAxis?: number | null;
        }>) | undefined;
        placement?: import('../../../node_modules/@floating-ui/core').Placement | undefined;
        strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
        teleportDisabled?: boolean | undefined;
        autoClose?: boolean | "inside" | "outside" | undefined;
        menuClass?: import('../../types/AnyValuedAttributes').ClassValue;
        noCaret?: boolean | undefined;
        noWrapper?: boolean | undefined;
        splitButtonType?: import('../..').ButtonType | undefined;
        splitClass?: import('../../types/AnyValuedAttributes').ClassValue;
        splitDisabled?: boolean | undefined;
        splitHref?: string | undefined;
        splitTo?: import('vue-router').RouteLocationRaw | undefined;
        splitVariant?: (import('../..').ButtonVariant | null) | undefined;
        toggleClass?: import('../../types/AnyValuedAttributes').ClassValue;
        toggleText?: string | undefined;
        wrapperClass?: import('../../types/AnyValuedAttributes').ClassValue;
    }> & Readonly<{
        onOk?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onCancel?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        "onSplit-click"?: ((value: MouseEvent) => any) | undefined;
    }>, "toggle" | "hide" | ("disabled" | "id" | "size" | "text" | "unmountLazy" | "ariaLabel" | "role" | "split" | "show" | "isNav" | "initialAnimation" | "noFade" | "lazy" | "transProps" | "visible" | "variant" | "icon" | "teleportTo" | "boundary" | "boundaryPadding" | "floatingMiddleware" | "noFlip" | "noShift" | "noSize" | "offset" | "placement" | "strategy" | "teleportDisabled" | "autoClose" | "menuClass" | "noCaret" | "noWrapper" | "splitButtonType" | "splitClass" | "splitDisabled" | "splitHref" | "splitTo" | "splitVariant" | "toggleClass" | "toggleText" | "wrapperClass")> & import('vue').ShallowUnwrapRef<{
        hide: (trigger?: string, noTriggerEmit?: boolean) => Promise<string>;
        show: (resolveOnHide?: boolean) => Promise<boolean | string>;
        toggle: (resolveOnHide?: boolean) => Promise<boolean | string>;
    }> & {} & import('vue').ComponentCustomProperties & {} & {
        $slots: Readonly<import('../..').BDropdownSlots> & import('../..').BDropdownSlots;
    }) | null;
}, HTMLLIElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
