import { BAccordionItemProps } from '../../types/ComponentProps';
import { BAccordionItemSlots } from '../../types';
type __VLS_Props = Omit<BAccordionItemProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BAccordionItemProps['modelValue'], undefined>;
} & __VLS_Props;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<BAccordionItemSlots> & BAccordionItemSlots;
    refs: {
        _el: HTMLDivElement;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    ok: (value: import('../..').BvTriggerableEvent) => any;
    cancel: (value: import('../..').BvTriggerableEvent) => any;
    toggle: (value: import('../..').BvTriggerableEvent) => any;
    hidden: (value: import('../..').BvTriggerableEvent) => any;
    show: (value: import('../..').BvTriggerableEvent) => any;
    "show-prevented": (value: import('../..').BvTriggerableEvent) => any;
    hide: (value: import('../..').BvTriggerableEvent) => any;
    "hide-prevented": (value: import('../..').BvTriggerableEvent) => any;
    "toggle-prevented": (value: import('../..').BvTriggerableEvent) => any;
    shown: (value: import('../..').BvTriggerableEvent) => any;
    "update:modelValue": (value: boolean) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onOk?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onCancel?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onToggle?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onShow-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onToggle-prevented"?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
}>, {
    id: string;
    unmountLazy: boolean;
    title: string;
    show: boolean;
    horizontal: boolean;
    isNav: boolean;
    tag: string;
    lazy: boolean;
    visible: boolean;
    bodyAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    bodyClass: import('../../types/AnyValuedAttributes').ClassValue;
    buttonAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    buttonClass: import('../../types/AnyValuedAttributes').ClassValue;
    collapseClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    headerClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerTag: string;
    wrapperAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {
    _el: HTMLDivElement;
}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
