import { Ref } from 'vue';
import { OrchestratorCreateOptions, PromiseWithComponent, ToastOrchestratorCreateParam, ToastOrchestratorParam } from '../../types/ComponentOrchestratorTypes';
import { BToast } from '../../components';
export declare const useToast: () => {
    _isToastAppend: Ref<boolean, boolean>;
    _isOrchestratorInstalled: Ref<boolean, boolean>;
    store: Ref<import('../..').OrchestratorArrayValue[], import('../..').OrchestratorArrayValue[]>;
    create: (obj?: ToastOrchestratorCreateParam, options?: OrchestratorCreateOptions) => PromiseWithComponent<typeof BToast, ToastOrchestratorParam>;
    show: (obj?: ToastOrchestratorCreateParam) => PromiseWithComponent<typeof BToast, ToastOrchestratorParam>;
};
/**
 * @deprecated use useToast() instead.
 * @returns {ReturnType<typeof useToast>} The toast controller
 */
export declare const useToastController: () => {
    _isToastAppend: Ref<boolean, boolean>;
    _isOrchestratorInstalled: Ref<boolean, boolean>;
    store: Ref<import('../..').OrchestratorArrayValue[], import('../..').OrchestratorArrayValue[]>;
    create: (obj?: ToastOrchestratorCreateParam, options?: OrchestratorCreateOptions) => PromiseWithComponent<typeof BToast, ToastOrchestratorParam>;
    show: (obj?: ToastOrchestratorCreateParam) => PromiseWithComponent<typeof BToast, ToastOrchestratorParam>;
};
