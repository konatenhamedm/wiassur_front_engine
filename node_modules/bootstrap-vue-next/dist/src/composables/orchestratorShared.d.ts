import { Ref, WatchHandle } from 'vue';
import { ControllerKey, OrchestratorArrayValue, PromiseWithComponent } from '../types/ComponentOrchestratorTypes';
import { BvTriggerableEvent } from '../utils';
export declare function buildPromise<TComponent, TParam, TArrayValue extends OrchestratorArrayValue>(_id: ControllerKey, store: Ref<TArrayValue[]>): {
    value: PromiseWithComponent<TComponent, TParam>;
    resolve: (value: BvTriggerableEvent | boolean | null) => void;
    stop: WatchHandle | undefined;
};
export declare const _newOrchestratorRegistry: () => {
    store: Ref<OrchestratorArrayValue[]>;
    _isOrchestratorInstalled: Ref<boolean>;
    _isToastAppend: Ref<boolean>;
};
export declare const useOrchestratorRegistry: () => {
    store: Ref<OrchestratorArrayValue[]>;
    _isToastAppend: Ref<boolean>;
    _isOrchestratorInstalled: Ref<boolean>;
};
