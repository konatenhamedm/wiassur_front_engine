{"version":3,"file":"index.umd.js","sources":["../../../../src/composables/useBreadcrumb/index.ts"],"sourcesContent":["import {computed, inject, type MaybeRefOrGetter, toValue, watch} from 'vue'\nimport {breadcrumbGlobalIndexKey, breadcrumbRegistryKey} from '../../utils/keys'\n\nexport const useBreadcrumb = (\n  /**\n   * When set it will utilize a separate instance of breadcrumb\n   */\n  id: MaybeRefOrGetter<string | null> = breadcrumbGlobalIndexKey\n) => {\n  const parentData = inject(breadcrumbRegistryKey)\n\n  const resolvedId = computed(() => {\n    const v = toValue(id)\n    if (!v) return breadcrumbGlobalIndexKey\n    return v\n  })\n\n  watch(\n    resolvedId,\n    (newValue) => {\n      if (!newValue || !parentData) return\n      parentData.items.value = {\n        ...parentData.items.value,\n        [newValue]: parentData.items.value[newValue] || [],\n      }\n    },\n    {immediate: true}\n  )\n\n  const items = computed({\n    get: () => parentData?.items.value[resolvedId.value] || [],\n    set(value) {\n      if (!parentData) return\n      parentData.items.value[resolvedId.value] = value\n    },\n  })\n\n  return {\n    items,\n    reset() {\n      if (!parentData) return\n      parentData.reset(resolvedId.value || undefined)\n    },\n  }\n}\n"],"names":["id","breadcrumbGlobalIndexKey","parentData","inject","breadcrumbRegistryKey","resolvedId","computed","v","toValue","watch","newValue","items","value","immediate","get","set","reset"],"mappings":"oKAG6B,CAI3BA,EAAsCC,8BAEtC,MAAMC,EAAaC,EAAAA,OAAOC,yBAEpBC,EAAaC,EAAAA,SAAS,KAC1B,MAAMC,EAAIC,EAAAA,QAAQR,GAClB,OAAKO,GAAUN,EAAAA,2BAIjBQ,EAAAA,MACEJ,EACCK,IACMA,GAAaR,IAClBA,EAAWS,MAAMC,MAAQ,IACpBV,EAAWS,MAAMC,MACpBF,CAACA,GAAWR,EAAWS,MAAMC,MAAMF,IAAa,MAGpD,CAACG,WAAW,IAWd,MAAO,CACLF,MATYL,EAAAA,SAAS,CACrBQ,IAAK,IAAMZ,GAAYS,MAAMC,MAAMP,EAAWO,QAAU,GACxD,GAAAG,CAAIH,GACGV,IACLA,EAAWS,MAAMC,MAAMP,EAAWO,OAASA,EAC7C,IAKA,KAAAI,GACOd,GACLA,EAAWc,MAAMX,EAAWO,YAAS,EACvC"}