{"version":3,"file":"index.umd.js","sources":["../../../../src/composables/useToggle/index.ts"],"sourcesContent":["import {\n  type ComponentInternalInstance,\n  computed,\n  getCurrentInstance,\n  inject,\n  type MaybeRefOrGetter,\n  toValue,\n} from 'vue'\n\nimport {showHideRegistryKey} from '../../utils/keys'\n\nexport const useToggle = (id: MaybeRefOrGetter<string | undefined> = undefined) => {\n  const instance = getCurrentInstance()\n  const storage = inject(showHideRegistryKey, null)\n\n  if (!storage) {\n    throw new Error(\n      'useToggle() must be called within setup(), and BApp, useRegistry or plugin must be installed/provided.'\n    )\n  }\n  const registry = storage.values\n  // const registry = toRef(() => appRegistry.value)\n  const findComponent = (\n    component: ComponentInternalInstance\n  ): ComponentInternalInstance | null => {\n    if (!component.parent) {\n      return null\n    }\n\n    if (\n      component.parent.exposed?.['id'] &&\n      registry.value.get(toValue(component.parent.exposed.id))\n    ) {\n      return component.parent\n    }\n\n    return findComponent(component.parent)\n  }\n\n  const myComponent = computed(() => {\n    const resolvedId = toValue(id)\n\n    if (!registry) return null\n    if (resolvedId) {\n      const value = registry.value.get(resolvedId)\n      return toValue(value) || null\n    }\n\n    if (!instance) {\n      return null\n    }\n\n    const component = findComponent(instance)\n    return toValue(registry.value.get(toValue(component?.exposed?.id))) || null\n  })\n\n  return {\n    value: computed(() => myComponent.value?.value),\n    show: (resolveOnHide?: boolean) =>\n      myComponent.value?.show(resolveOnHide) || Promise.reject('not found'),\n    hide: (trigger?: string) =>\n      myComponent.value?.hide(trigger, true) || Promise.reject('not found'),\n    toggle: (resolveOnHide?: boolean) =>\n      myComponent.value?.toggle(resolveOnHide) || Promise.reject('not found'),\n    component: computed(() => myComponent.value?.component),\n  }\n}\n"],"names":["id","instance","getCurrentInstance","storage","inject","showHideRegistryKey","Error","registry","values","findComponent","component","parent","exposed","value","get","toValue","myComponent","computed","resolvedId","show","resolveOnHide","Promise","reject","hide","trigger","toggle"],"mappings":"gKAWyB,CAACA,OAA2C,KACnE,MAAMC,EAAWC,EAAAA,qBACXC,EAAUC,EAAAA,OAAOC,EAAAA,oBAAqB,MAE5C,IAAKF,EACH,MAAM,IAAIG,MACR,0GAGJ,MAAMC,EAAWJ,EAAQK,OAEnBC,EACJC,GAEKA,EAAUC,OAKbD,EAAUC,OAAOC,SAAc,IAC/BL,EAASM,MAAMC,IAAIC,EAAAA,QAAQL,EAAUC,OAAOC,QAAQZ,KAE7CU,EAAUC,OAGZF,EAAcC,EAAUC,QAVtB,KAaLK,EAAcC,EAAAA,SAAS,KAC3B,MAAMC,EAAaH,EAAAA,QAAQf,GAE3B,IAAKO,EAAU,OAAO,KACtB,GAAIW,EAAY,CACd,MAAML,EAAQN,EAASM,MAAMC,IAAII,GACjC,OAAOH,EAAAA,QAAQF,IAAU,IAC3B,CAEA,IAAKZ,EACH,OAAO,KAGT,MAAMS,EAAYD,EAAcR,GAChC,OAAOc,UAAQR,EAASM,MAAMC,IAAIC,EAAAA,QAAQL,GAAWE,SAASZ,OAAS,OAGzE,MAAO,CACLa,MAAOI,EAAAA,SAAS,IAAMD,EAAYH,OAAOA,OACzCM,KAAOC,GACLJ,EAAYH,OAAOM,KAAKC,IAAkBC,QAAQC,OAAO,aAC3DC,KAAOC,GACLR,EAAYH,OAAOU,KAAKC,GAAS,IAASH,QAAQC,OAAO,aAC3DG,OAASL,GACPJ,EAAYH,OAAOY,OAAOL,IAAkBC,QAAQC,OAAO,aAC7DZ,UAAWO,EAAAA,SAAS,IAAMD,EAAYH,OAAOH"}